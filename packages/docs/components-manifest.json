{
  "schemaVersion": "1",
  "$schema": "https://raw.githubusercontent.com/webcomponents/custom-elements-manifest/master/schema.json",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "./index.js",
      "declarations": [],
      "exports": [
        {
          "name": "apollo-client",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-client",
            "module": "./apollo-client.js"
          }
        },
        {
          "name": "apollo-mutation",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-mutation",
            "module": "./apollo-mutation.js"
          }
        },
        {
          "name": "apollo-mutation",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-mutation",
            "module": "./apollo-mutation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-client.js",
      "declarations": [
        {
          "kind": "class",
          "name": "ApolloClientElement",
          "tagName": "apollo-client",
          "summary": "\nProvides an ApolloClient instance to all nested ApolloElement children, even across (open) shadow boundaries.\n\n## Examples\n### Generate a simple ApolloClient instance\n```html\n<apollo-client uri=\"/graphql\"></apollo-client>\n```\n\n### Prevent network calls when required variables are absent\n```html\n<apollo-client uri=\"/graphql\" validate-variables></apollo-client>\n```\n\n### Providing a client to a tree of Nodes\n```html\n<apollo-client id=\"client-a\">\n  <apollo-query>\n    <!--...-->\n  </apollo-query>\n</apollo-client>\n```\n\n### Nesting separate clients\n```html\n<apollo-client id=\"client-a\">\n  <query-element>\n    <!-- This element queries from client-a's endpoint -->\n  </query-element>\n  <apollo-client id=\"client-b\">\n    <query-element>\n      <!-- This element queries from client-b's endpoint -->\n    </query-element>\n  </apollo-client>\n</apollo-client>\n```\n",
          "attributes": [
            {
              "name": "uri",
              "type": {
                "type": "string"
              },
              "fieldName": "uri"
            },
            {
              "name": "validate-variables",
              "type": {
                "type": "boolean"
              },
              "fieldName": "validateVariables"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "uri",
              "reflects": true,
              "type": {
                "type": "string"
              },
              "summary": "When the URI attribute is set, `<apollo-client>` will asynchronously create a new ApolloClient instance with some default parameters."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "type": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "Reference to the `ApolloClient` instance."
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "type": "readonly ApolloElementElement[]"
              },
              "readonly": true,
              "summary": "List of all ApolloElements registered to this client."
            },
            {
              "kind": "field",
              "name": "typePolicies",
              "optional": true,
              "summary": "Type Policies for the client.",
              "type": {
                "type": "TypePolicies"
              }
            },
            {
              "kind": "field",
              "name": "validateVariables",
              "summary": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
              "type": {
                "type": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "createApolloClient",
              "async": true,
              "return": {
                "summary": "A simple ApolloClient instance",
                "type": {
                  "type": "Promise<ApolloClient<NormalizedCacheObject>>"
                }
              }
            }
          ],
          "events": [
            {
              "name": "client-changed",
              "description": "Fired when the client instance changes. Compatible with Polymer-style two-way binding.",
              "type": {
                "type": "CustomEvent<{ value: ApolloClient, client: ApolloClient }>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-client",
          "declaration": {
            "name": "ApolloClientElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloClientElement",
          "declaration": {
            "name": "ApolloClientElement"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-query.js",
      "declarations": [
        {
          "kind": "class",
          "tagName": "apollo-query",
          "name": "ApolloQueryElement",
          "summary": "Render a GraphQL query using HTML.",
          "description": "### Example: Render a query to shadow DOM\n\n```html\n<apollo-query>\n  <script type=\"application/graphql\">\n    query MyProfile {\n      profile { name picture }\n    }\n  </script>\n  <template>\n    <img loading=\"lazy\" src=\"{{ data.profile.picture }}\" alt=\"{{ data.profile.name }}\"/>\n  </template>\n</apollo-query>\n```\n\n### Example: Setting query and variables using the DOM \n```html \n<apollo-query id=\"query-element\" template=\"avatar-template\"></apollo-query> \n \n<template id=\"avatar-template\"> \n  <img loading=\"lazy\" src=\"{{ data.profile.picture }}\" alt=\"{{ data.profile.name }}\"/> \n</template> \n \n<script type=\"module\"> \n  import { gql } from '@apollo/client/core'; \n  const el = document.getElementById('query-element'); \n  el.query = gql` \n    query MyProfile($size: Int) { \n      profile { name picture(size: $size) } \n    } \n  `; \n  el.variables = { size: 48 }; \n</script> \n```",
          "attributes": [
            {
              "name": "template",
              "fieldName": "template",
              "type": {
                "type": "string"
              }
            },
            {
              "name": "no-shadow",
              "description": "When set, the element will render to a `<div>` in its light DOM. If set with a string, the string will be the div's class name.",
              "type": {
                "type": "Boolean|string"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "template",
              "description": "Template element for the query. Can either be a light-DOM child of the element, or referenced by ID with the `template` attribute.\n\n#### Example: Referencing a template by ID\n\n```html\n<apollo-query template=\"tpl\"></apollo-query>\n<template id=\"tpl\">\n  <p>Hi, {%raw%}{{ data.name }}{%endraw%}</p>\n</template>\n```\n",
              "type": {
                "type": "HTMLTemplateElement|null"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "summary": "Render the template.",
              "return": {
                "type": {
                  "type": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-query",
          "declaration": {
            "name": "ApolloQueryElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloQueryElement",
          "declaration": {
            "name": "ApolloQueryElement"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-mutation.js",
      "declarations": [
        {
          "kind": "class",
          "tagName": "apollo-mutation",
          "name": "ApolloMutationElement",
          "summary": "Simple Mutation component that takes a button or link-wrapped button as it's trigger. When loading, it disables the button. On error, it toasts a snackbar with the error message. You can pass a `variables` object property, or if all your variables properties are strings, you can use the element's data attributes\n\n\n### Example: Using data attributes\n```html\n<apollo-mutation data-type=\"Type\" data-action=\"ACTION\">\n  <mwc-button slot=\"trigger\">OK</mwc-button>\n</apollo-mutation>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"type\": \"Type\",\n  \"action\": \"ACTION\"\n}\n```\n\n### Example: Using data attributes and variables\n```html\n<apollo-mutation data-type=\"Quote\" data-action=\"FLUB\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n  <mwc-textfield slot=\"variable\"\n      data-variable=\"name\"\n      value=\"Neil\"\n      label=\"Name\"></mwc-textfield>\n  <mwc-textarea slot=\"variable\"\n      data-variable=\"comment\"\n      value=\"That's one small step...\"\n      label=\"comment\"></mwc-textarea>\n</apollo-mutation>\n```\n\nWill mutate with the following as `variables`:\n\n```json\n{\n  \"name\": \"Neil\",\n  \"comment\": \"That's one small step...\",\n  \"type\": \"Quote\",\n  \"action\": \"FLUB\"\n}\n```\n\n### Example: Using data attributes and variables with input property\n```html\n<apollo-mutation data-type=\"Type\" data-action=\"ACTION\" input-key=\"actionInput\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n  <mwc-textfield slot=\"variable\"\n      data-variable=\"comment\"\n      value=\"Hey!\"\n      label=\"comment\"></mwc-textfield>\n</apollo-mutation>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"actionInput\": {\n    \"comment\": \"Hey!\",\n    \"type\": \"Type\",\n    \"action\": \"ACTION\"\n  }\n}\n```\n\n### Example: Using DOM properties\n```html\n<apollo-mutation id=\"mutation\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n</apollo-mutation>\n<script>\n  document.getElementById('mutation').mutation = SomeMutation;\n  document.getElementById('mutation').variables = {\n    type: \"Type\",\n    action: \"ACTION\"\n  };\n</script>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"type\": \"Type\",\n  \"action\": \"ACTION\"\n}\n```\n",
          "attributes": [
            {
              "name": "input-key",
              "type": "string",
              "fieldName": "inputKey"
            }
          ],
          "cssParts": [
            {
              "name": "variables",
              "description": "The container for variable inputs."
            },
            {
              "name": "trigger",
              "description": "The container for variable inputs."
            }
          ],
          "slots": [
            {
              "name": "trigger",
              "summary": "The triggering element. Must be a button or and anchor that wraps a button."
            },
            {
              "name": "variables",
              "summary": "An input with a `data-variable` attribute. It's `value` property gets the value for the corresponding variable."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "inputKey",
              "reflects": false,
              "description": "When set, variable data attributes will be packed into an\nobject property with the name of this property\n\n```html\n<apollo-mutation id=\"a\" data-variable=\"var\"></apollo-mutation>\n<apollo-mutation id=\"b\" input-key=\"input\" data-variable=\"var\"></apollo-mutation>\n<script>\n  console.log(a.variables) // { variable: 'var' }\n  console.log(b.variables) // { input: { variable: 'var' } }\n</script>\n```\n",
              "type": {
                "type": "string"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "privacy": "protected",
              "readonly": true,
              "summary": "Slotted trigger node.",
              "description": "Slot in a button-like element (e.g. `<button>` or `<custom-button>`). When clicked, the element will mutate. Slot in a link (`<a href>`) to make this element navigate on mutation completion.",
              "type": {
                "type": "HTMLElement | null"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "privacy": "protected",
              "readonly": true,
              "summary": "The slotted button",
              "description": "If the slotted trigger node is a button, this is the trigger. If the slotted trigger node is a link with a button as it's first child, this is the button.",
              "type": {
                "type": "ButtonLikeElement | null"
              }
            },
            {
              "kind": "field",
              "name": "inputs",
              "privacy": "protected",
              "summary": "Variable input elements.",
              "description": "An array of all the input-like elements slotted as variables (e.g. `<input/>` or `<custom-input>`). Custom inputs must have a `value` property corresponding to the input's value.",
              "readonly": true,
              "type": {
                "type": "InputLikeElement[]"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "description": "The `href` attribute of the link trigger. The element will navigate to his URL on mutation completion.",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "type": "string|undefined"
              }
            },
            {
              "kind": "method",
              "name": "resolveURL",
              "optional": true,
              "summary": "Define this function to determine the URL to navigate to after a mutation.\nFunction can be synchronous or async.\nIf this function is not defined, will navigate to the `href` property of the link trigger.\n\n#### Example: Navigate to a post's page after creating it\n```html\n<apollo-mutation id=\"mutation\">\n  <script type=\"application/graphql\">\n    mutation CreatePostMutation($title: String, $content: String) {\n      createPost(title: $title, content: $content) {\n        slug\n      }\n    }\n  </script>\n  <mwc-textfield label=\"Post title\" slot=\"variable\" data-variable=\"title\"></mwc-textfield>\n  <mwc-textarea label=\"Post Content\" slot=\"variable\" data-variable=\"content\"></mwc-textarea>\n</apollo-mutation>\n\n<script>\n  document.getElementById('mutation').resolveURL =\n    data => `/posts/${data.createPost.slug}/`;\n</script>\n```",
              "return": {
                "type": {
                  "type": "string|Promise<string>"
                },
                "description": "url to navigate to."
              },
              "parameters": [
                {
                  "name": "data",
                  "description": "mutation data",
                  "type": {
                    "type": "Data<D>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVariablesFromInputs",
              "privacy": "protected",
              "description": "Constructs a variables object from the element's data-attributes and any slotted variable inputs.",
              "return": {
                "type": {
                  "type": "Variables<D, V> | null"
                }
              }
            }
          ],
          "events": [
            {
              "name": "will-mutate",
              "description": "When the element is about to mutate. Useful for setting variables. Prevent default to prevent mutation.",
              "type": {
                "type": "CustomEvent<{ element: this }>"
              }
            },
            {
              "name": "will-navigate",
              "description": "When the mutation resolves and the element is about to navigate. cancel the event to handle navigation yourself e.g. using a client-side router.",
              "type": {
                "type": "CustomEvent<{ data: Data, element: this }>"
              }
            },
            {
              "name": "mutation-completed",
              "description": "When the mutation resolves.",
              "type": {
                "type": "CustomEvent<{ data: Data, element: this }>"
              }
            },
            {
              "name": "mutation-error",
              "description": "When the mutation rejects.",
              "type": {
                "type": "CustomEvent<{ error: ApolloError, element: this }>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-mutation",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloMutationElement",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        }
      ]
    },
    {
          "kind": "javascript-module",
          "path": "./apollo-subscription.js",
          "declarations": [
            {
              "kind": "class",
              "tagName": "apollo-subscription",
              "name": "ApolloMutationElement",
              "summary": "Render a GraphQL subscription to the DOM\n\n## Render a subscription to Shadow DOM\n```html\n<apollo-subscription>\n <script type=\"application/graphql\">\n    subscription NewMessages {\n      messageAdded { id author content }\n    }\n  </script>\n  <template>\n    <article>\n      <span class=\"author-name\">{{ data.author.name }}</span>\n      <mark-down>{{ data.content }}</mark-down>\n    </article>\n  </template>\n</apollo-subscription>\n```\n\n## Setting subscription and variables using the DOM\n```html\n<apollo-subscription id=\"subscription-element\" template=\"message-template\"></apollo-subscription>\n\n<template id=\"message-template\">\n  <article>\n    <span class=\"author-name\">{{ data.author.name }}</span>\n    <mark-down>{{ data.content }}</mark-down>\n  </article>\n</template>\n\n<script type=\"module\">\n  import { gql } from '@apollo/client/core';\n  const el = document.getElementById('subscription-element');\n  el.subscription = gql`\n    subscription NewMessages($limit: Int) {\n      messagesAdded {\n        messages { id author content }\n        hasMore\n      }\n    }\n  `;\n  el.variables = { limit: 10 };\n</script>\n```\n"
            }
          ],
          "exports": [
            {
              "kind": "custom-element-definition",
              "name": "apollo-mutation",
              "declaration": {
                "name": "ApolloMutationElement"
              }
            },
            {
              "kind": "js",
              "name": "ApolloMutationElement",
              "declaration": {
                "name": "ApolloMutationElement"
              }
            }
          ]
        }
  ]
}
