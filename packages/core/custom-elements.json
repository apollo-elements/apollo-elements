{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "apollo-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApolloController",
          "members": [
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "default": "{}",
              "description": "| Option      | Type                                           | Description                                                                                                       |\n| ----------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| client      | `ApolloClient<NormalizedCacheObject>`{lang=ts} | The `ApolloClient` instance for the controller.                                                                   |\n| variables   | `Variables<D, V>`{lang=ts}                     | Variables for the operation.                                                                                      |\n| context     | `any`{lang=ts}                                 | Context passed to the link execution chain.                                                                       |\n| errorPolicy | `ErrorPolicy`{lang=ts}                         | the [error policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation |\n| hostElement | `HTMLElement`{lang=ts}                         | When provided, the controller will fall back to this element to fire events                                       |\n"
            },
            {
              "kind": "field",
              "name": "#client",
              "privacy": "private",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#document",
              "privacy": "private",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "emitter",
              "type": {
                "text": "EventTarget"
              },
              "privacy": "protected",
              "summary": "The event emitter to use when firing events, usually the host element.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "default": "null",
              "summary": "Latest data for the operation, or `null`.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "ApolloError | null"
              },
              "default": "null",
              "summary": "Latest error from the operation, or `null`.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "default": "[]",
              "summary": "Latest errors from the operation, or `[]`.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "summary": "Whether a request is in-flight.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "summary": "Options for the operation and controller.",
              "description": "| Option      | Type                                           | Description                                                                                                       |\n| ----------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| client      | `ApolloClient<NormalizedCacheObject>`{lang=ts} | The `ApolloClient` instance for the controller.                                                                   |\n| variables   | `Variables<D, V>`{lang=ts}                     | Variables for the operation.                                                                                      |\n| context     | `any`{lang=ts}                                 | Context passed to the link execution chain.                                                                       |\n| errorPolicy | `ErrorPolicy`{lang=ts}                         | the [error policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation |\n| hostElement | `HTMLElement`{lang=ts}                         | When provided, the controller will fall back to this element to fire events                                       |\n"
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The `ApolloClient` instance for this controller."
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "The GraphQL document for the operation."
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "summary": "Variables for the operation."
            },
            {
              "kind": "method",
              "name": "[update]",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "properties",
                  "optional": true,
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                }
              ],
              "summary": "requests an update on the host.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "optional": true,
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL document changes.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL variables change.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "clientChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "client",
                  "optional": true,
                  "type": {
                    "text": "ApolloClient<NormalizedCacheObject> | null"
                  }
                }
              ],
              "summary": "callback for when the Apollo client changes.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "notify",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "(keyof this)[]"
                  }
                }
              ],
              "summary": "Notifies about updated properties.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "Assigns the controller's variables and GraphQL document.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "ApolloControllerConnectedEvent"
              },
              "description": "The controller's host connected to the DOM.",
              "name": "apollo-controller-connected"
            },
            {
              "type": {
                "text": "ApolloControllerDisconnectedEvent"
              },
              "description": "The controller's host disconnected from the DOM.",
              "name": "apollo-controller-disconnected"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloController",
          "declaration": {
            "name": "ApolloController",
            "module": "apollo-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-mutation-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApolloMutationController",
          "members": [
            {
              "kind": "field",
              "name": "mostRecentMutationId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The ID number of the most recent mutation since the element was instantiated."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "summary": "Options to customize the mutation and to interface with the controller.",
              "description": "| Option              | Type                                     | Description                                                                                                             |\n| ------------------- | ---------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| variables           | `Variables<D, V>`{lang=ts}               | Operation variables. See [variables](/api/core/interfaces/mutation/#variables).                                         |\n| optimisticResponse  | `OptimisticResponseType<D, V>`{lang=ts}  | See [optimisticResponse](/api/core/interfaces/mutation/#optimisticresponse)                                             |\n| fetchPolicy         | `ErrorPolicy`{lang=ts}                   | See [fetchPolicy](/api/core/interfaces/mutation/#fetchpolicy)                                                           |\n| refetchQueries      | `RefetchQueriesType<D> \\| null`{lang=ts} | See [refetchQueries](/api/core/interfaces/mutation/#refetchqueries)                                                     |\n| awaitRefetchQueries | `boolean`{lang=ts}                       | See [awaitRefetchQueries](/api/core/interfaces/mutation/#awaitrefetchqueries)                                           |\n| update              | `MutationUpdaterFn<Data<D>>`{lang=ts}    | Function used to update the client cache following the mutation. See [updater](/api/core/interfaces/mutation/#updater). |\n\nInherits from [ApolloControllerOptions](/api/core/controllers/controller/#options)\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "mutation",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "The GraphQL mutation document"
            },
            {
              "kind": "method",
              "name": "mutate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<FetchResult<Data<D>>>"
                },
                "description": "| Property   | Type                               | Description                                            |\n| ---------- | ---------------------------------- | ------------------------------------------------------ |\n| data       | `Data<D, V>`{lang=ts}              | The result of a successful execution of the mutation   |\n| errors     | `readonly GraphQLError[]`{lang=ts} | included when any errors occurred as a non-empty array |\n| extensions | `boolean`{lang=ts}                 | Reserved for adding non-standard properties            |\n| context    | `Record<string, unknown>`{lang=ts} | See [context](/api/core/interfaces/element/#context)   |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<MutationOptions<Data<D>, Variables<D, V>>>"
                  },
                  "description": "All named arguments to mutate default to the element's corresponding instance property. So you can call `element.mutate()` without arguments and it will call using `element.mutation`, `element.variables`, etc. You can likewise override instance properties per-call by passing them in, e.g.\n\n```ts\nawait element.mutate({\n  fetchPolicy: 'network-only'\n  variables: {\n    ...element.variables,\n    name: 'overridden',\n  },\n});\n```\n\n| Property            | Type                                                   | Description                                                                   |\n| ------------------- | ------------------------------------------------------ | ----------------------------------------------------------------------------- |\n| awaitRefetchQueries | `boolean`{lang=ts}                                     | See [awaitRefetchQueries](/api/core/interfaces/mutation/#awaitrefetchqueries) |\n| context             | `Record<string, unknown>`{lang=ts}                     | See [context](/api/core/interfaces/element/#context)                          |\n| errorPolicy         | `ErrorPolicy`{lang=ts}                                 | See [errorPolicy](/api/core/interfaces/element/#errorpolicy)                  |\n| fetchPolicy         | `FetchPolicy`{lang=ts}                                 | See [fetchPolicy](/api/core/interfaces/mutation/#fetchpolicy)                 |\n| mutation            | `DocumentNode`{lang=ts}                                | See [mutation](/api/core/interfaces/mutation/#mutation)                       |\n| optimisticResponse  | `OptimisticResponseType<D, V>`{lang=ts}                | See [optimisticResponse](/api/core/interfaces/mutation/#optimisticresponse)   |\n| refetchQueries      | `RefetchQueriesType<D, V>`{lang=ts}                    | See [refetchQueries](/api/core/interfaces/mutation/#refetchqueries)           |\n| update              | `MutationUpdaterFn<Data<D>, Variables<D, V>>`{lang=ts} | See [updater](/api/core/interfaces/mutation/#updater)                         |\n| variables           | `Variables<D, V>`{lang=ts}                             | See [variables](/api/core/interfaces/mutation/#variables)                     |\n"
                }
              ],
              "summary": "Fires a mutation\nThis resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error.",
              "async": true,
              "description": ""
            },
            {
              "kind": "method",
              "name": "generateMutationId",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Increments and returns the most recent mutation id."
            },
            {
              "kind": "method",
              "name": "isMostRecentMutation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "mutationId",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Returns true when an ID matches the most recent mutation id."
            },
            {
              "kind": "method",
              "name": "onCompletedMutation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "FetchResult<Data<D>>"
                },
                "description": "| Property   | Type                               | Description                                            |\n| ---------- | ---------------------------------- | ------------------------------------------------------ |\n| data       | `Data<D, V>`{lang=ts}              | The result of a successful execution of the mutation   |\n| errors     | `readonly GraphQLError[]`{lang=ts} | included when any errors occurred as a non-empty array |\n| extensions | `boolean`{lang=ts}                 | Reserved for adding non-standard properties            |\n| context    | `Record<string, unknown>`{lang=ts} | See [context](/api/core/interfaces/element/#context)   |\n"
              },
              "parameters": [
                {
                  "name": "mutationId",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "response",
                  "type": {
                    "text": "FetchResult<Data<D>>"
                  },
                  "description": "| Property   | Type                               | Description                                            |\n| ---------- | ---------------------------------- | ------------------------------------------------------ |\n| data       | `Data<D, V>`{lang=ts}              | The result of a successful execution of the mutation   |\n| errors     | `readonly GraphQLError[]`{lang=ts} | included when any errors occurred as a non-empty array |\n| extensions | `boolean`{lang=ts}                 | Reserved for adding non-standard properties            |\n| context    | `Record<string, unknown>`{lang=ts} | See [context](/api/core/interfaces/element/#context)   |\n"
                }
              ],
              "description": "Callback for when a mutation is completed."
            },
            {
              "kind": "method",
              "name": "onMutationError",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "never"
                }
              },
              "parameters": [
                {
                  "name": "mutationId",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "error",
                  "type": {
                    "text": "ApolloError"
                  }
                }
              ],
              "description": "Callback for when a mutation fails."
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "default": "{}",
              "description": "| Option      | Type                                           | Description                                                                                                       |\n| ----------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| client      | `ApolloClient<NormalizedCacheObject>`{lang=ts} | The `ApolloClient` instance for the controller.                                                                   |\n| variables   | `Variables<D, V>`{lang=ts}                     | Variables for the operation.                                                                                      |\n| context     | `any`{lang=ts}                                 | Context passed to the link execution chain.                                                                       |\n| errorPolicy | `ErrorPolicy`{lang=ts}                         | the [error policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation |\n| hostElement | `HTMLElement`{lang=ts}                         | When provided, the controller will fall back to this element to fire events                                       |\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#client",
              "privacy": "private",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#document",
              "privacy": "private",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "emitter",
              "type": {
                "text": "EventTarget"
              },
              "privacy": "protected",
              "summary": "The event emitter to use when firing events, usually the host element.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "default": "null",
              "summary": "Latest data for the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "ApolloError | null"
              },
              "default": "null",
              "summary": "Latest error from the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "default": "[]",
              "summary": "Latest errors from the operation, or `[]`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "summary": "Whether a request is in-flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The `ApolloClient` instance for this controller.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "The GraphQL document for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "summary": "Variables for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "[update]",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "properties",
                  "optional": true,
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                }
              ],
              "summary": "requests an update on the host.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "optional": true,
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL document changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL variables change.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "clientChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "client",
                  "optional": true,
                  "type": {
                    "text": "ApolloClient<NormalizedCacheObject> | null"
                  }
                }
              ],
              "summary": "callback for when the Apollo client changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "(keyof this)[]"
                  }
                }
              ],
              "summary": "Notifies about updated properties.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "Assigns the controller's variables and GraphQL document.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloController",
            "module": "/apollo-controller.js"
          },
          "events": [
            {
              "type": {
                "text": "ApolloControllerConnectedEvent"
              },
              "description": "The controller's host connected to the DOM.",
              "name": "apollo-controller-connected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            },
            {
              "type": {
                "text": "ApolloControllerDisconnectedEvent"
              },
              "description": "The controller's host disconnected from the DOM.",
              "name": "apollo-controller-disconnected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloMutationController",
          "declaration": {
            "name": "ApolloMutationController",
            "module": "apollo-mutation-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-query-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApolloQueryController",
          "members": [
            {
              "kind": "field",
              "name": "observableQuery",
              "type": {
                "text": "ObservableQuery<Data<D>, Variables<D, V>>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pollingInterval",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "summary": "Options to customize the query and to interface with the controller.",
              "description": "| Option          | Type                                                  | Description                                                                                                                               |\n| --------------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| fetchPolicy     | `WatchQueryFetchPolicy`{lang=ts}                      | The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.                             |\n| variables       | `Variables<D, V>`{lang=ts}                            | Variables for the query.                                                                                                                  |\n| noAutoSubscribe | `boolean`{lang=ts}                                    | If true, the element will not begin querying data until you manually call `subscribe`                                                     |\n| shouldSubscribe | `(op?: Partial<Operation<D, V>>) => boolean`{lang=ts} | Determines whether the element should attempt to subscribe automatically\\\\nOverride to prevent subscribing unless your conditions are met |\n| onData          | `(data: Data<D>) => void`{lang=ts}                    | Optional callback for when a query resolves.                                                                                              |\n| onError         | `(error: Error) => void`{lang=ts}                     | Optional callback for when an error occurs.                                                                                               |\n\nInherits from [ApolloControllerOptions](/api/core/controllers/controller/#options)\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "networkStatus",
              "description": "`networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\ndepending on your network status as it provides a more detailed view into the state of a network request\non your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\nThese number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query’s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\nreplace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\nIt is recommended that you use `loading`, however."
            },
            {
              "kind": "field",
              "name": "partial",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If data was read from the cache with missing fields,\npartial will be true. Otherwise, partial will be falsy.",
              "summary": "True when the query returned partial data."
            },
            {
              "kind": "field",
              "name": "#hasDisconnected",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#lastQueryDocument",
              "privacy": "private",
              "type": {
                "text": "DocumentNode"
              }
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "A GraphQL document containing a single query."
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Flags an element that's ready and able to auto-subscribe",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "summary": "initializes or reinitializes the query",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "canSubscribe",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V> | null, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ],
              "description": "Determines whether the element is able to automatically subscribe"
            },
            {
              "kind": "method",
              "name": "watchQuery",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ObservableQuery<Data<D>, Variables<D, V>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>"
                  }
                }
              ],
              "description": "Creates an instance of ObservableQuery with the options provided by the element.\n- `context` Context to be passed to link execution chain\n- `errorPolicy` Specifies the ErrorPolicy to be used for this query\n- `fetchPolicy` Specifies the FetchPolicy to be used for this query\n- `fetchResults` Whether or not to fetch results\n- `metadata` Arbitrary metadata stored in the store with this query. Designed for debugging, developer tools, etc.\n- `notifyOnNetworkStatusChange` Whether or not updates to the network status should trigger next on the observer of this query\n- `pollInterval` The time interval (in milliseconds) on which this query should be refetched from the server.\n- `query` A GraphQL document that consists of a single query to be sent down to the server.\n- `variables` A map going from variable name to variable value, where the variables are used within the GraphQL query."
            },
            {
              "kind": "method",
              "name": "nextData",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "ApolloQueryResult<Data<D>>"
                  },
                  "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "nextError",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "ApolloError"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clientChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "client",
                  "optional": true,
                  "type": {
                    "text": "ApolloClient<NormalizedCacheObject> | null"
                  }
                }
              ],
              "summary": "callback for when the Apollo client changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "doc",
                  "optional": true,
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL document changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Variables<D, V>"
                  }
                }
              ],
              "summary": "callback for when the GraphQL variables change.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "refetch",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Variables<D, V>"
                  },
                  "description": "The new set of variables. If there are missing variables, the previous values of those variables will be used."
                }
              ],
              "description": "Exposes the [`ObservableQuery#refetch`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.refetch) method.",
              "async": true
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ZenObservable.Subscription"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "options for controlling how the subscription subscribes"
                }
              ],
              "description": "Resets the observableQuery and subscribes."
            },
            {
              "kind": "method",
              "name": "subscribeToMore",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "(() => void) | void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "SubscribeToMoreOptions<Data<D>, TSubscriptionVariables, TSubscriptionData>"
                  }
                }
              ],
              "description": "Lets you pass a GraphQL subscription and updateQuery function\nto subscribe to more updates for your query.\n\nThe `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results."
            },
            {
              "kind": "method",
              "name": "executeQuery",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<QueryOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Option      | Type                               | Description                                                                                              |\n| ----------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | A GraphQL document that consists of a single query to be sent down to the server.                        |\n| variables   | `Variables<D, V>`{lang=ts}         | A map going from variable name to variable value, where the variables are used within the GraphQL query. |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | Specifies the [`fetchPolicy`](/api/core/interfaces/query/#fetchpolicy) to be used for this query.        |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | Specifies the [`ErrorPolicy`](/api/core/interfaces/element/#errorpolicy) to be used for this query.      |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                  |\n"
                }
              ],
              "summary": "Executes a Query once and updates the with the result",
              "async": true,
              "description": ""
            },
            {
              "kind": "method",
              "name": "fetchMore",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<FetchMoreParams<D, V>>"
                  },
                  "description": "| Option      | Type                               | Description                                                                                                      |\n| ----------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | Query to fetch, defaults to `this.query`                                                                         |\n| updateQuery | `Function`{lang=ts}                | Function to determine how to update the cache when the query resolves. (deprecated - use field policies instead) |\n| variables   | `Variables<D, V>`{lang=ts}         | Query variables                                                                                                  |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                          |\n"
                }
              ],
              "description": "Exposes the `ObservableQuery#fetchMore` method.\nhttps://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n\nThe optional `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results.\n\nThe optional `variables` parameter is an optional new variables object.",
              "async": true
            },
            {
              "kind": "method",
              "name": "startPolling",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ms",
                  "type": {
                    "text": "number"
                  },
                  "description": "milliseconds to wait between fetches"
                }
              ],
              "summary": "Start polling this query",
              "description": ""
            },
            {
              "kind": "method",
              "name": "stopPolling",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "summary": "Stop polling this query",
              "description": ""
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "default": "{}",
              "description": "| Option      | Type                                           | Description                                                                                                       |\n| ----------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| client      | `ApolloClient<NormalizedCacheObject>`{lang=ts} | The `ApolloClient` instance for the controller.                                                                   |\n| variables   | `Variables<D, V>`{lang=ts}                     | Variables for the operation.                                                                                      |\n| context     | `any`{lang=ts}                                 | Context passed to the link execution chain.                                                                       |\n| errorPolicy | `ErrorPolicy`{lang=ts}                         | the [error policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation |\n| hostElement | `HTMLElement`{lang=ts}                         | When provided, the controller will fall back to this element to fire events                                       |\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#client",
              "privacy": "private",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#document",
              "privacy": "private",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "emitter",
              "type": {
                "text": "EventTarget"
              },
              "privacy": "protected",
              "summary": "The event emitter to use when firing events, usually the host element.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "default": "null",
              "summary": "Latest data for the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "ApolloError | null"
              },
              "default": "null",
              "summary": "Latest error from the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "default": "[]",
              "summary": "Latest errors from the operation, or `[]`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "summary": "Whether a request is in-flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The `ApolloClient` instance for this controller.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "The GraphQL document for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "summary": "Variables for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "[update]",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "properties",
                  "optional": true,
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                }
              ],
              "summary": "requests an update on the host.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "(keyof this)[]"
                  }
                }
              ],
              "summary": "Notifies about updated properties.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "Assigns the controller's variables and GraphQL document.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloController",
            "module": "/apollo-controller.js"
          },
          "events": [
            {
              "type": {
                "text": "ApolloControllerConnectedEvent"
              },
              "description": "The controller's host connected to the DOM.",
              "name": "apollo-controller-connected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            },
            {
              "type": {
                "text": "ApolloControllerDisconnectedEvent"
              },
              "description": "The controller's host disconnected from the DOM.",
              "name": "apollo-controller-disconnected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloQueryController",
          "declaration": {
            "name": "ApolloQueryController",
            "module": "apollo-query-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "apollo-subscription-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApolloSubscriptionController",
          "members": [
            {
              "kind": "field",
              "name": "observable",
              "type": {
                "text": "Observable<FetchResult<Data<D>>>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observableSubscription",
              "type": {
                "text": "ZenObservable.Subscription"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "summary": "Options to customize the subscription and to interface with the controller.",
              "description": "| Option                 | Type                                                           | Description                                                                                                                                 |\n| ---------------------- | -------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| client                 | `ApolloClient`{lang=ts}                                        | ApolloClient instance for the subscription.                                                                                                 |\n| fetchPolicy            | `FetchPolicy`{lang=ts}                                         | See [fetchPolicy](/api/core/interfaces/subscription/#fetchpolicy)                                                                           |\n| noAutoSubscribe        | `boolean`{lang=ts}                                             | If set, the component will not subscribe until called explicitly. See [noAutoSubscribe](/api/core/interfaces/subscription/#noautosubscribe) |\n| onError                | `(error: ApolloError) => void`{lang=ts}                        | Callback for when subscription produces an error                                                                                            |\n| onData                 | `(result: OnSubscriptionDataParams<Data<D>>) => void`{lang=ts} | Callback for when subscription produces new data                                                                                            |\n| onSubscriptionComplete | `() => void`{lang=ts}                                          | Callback for when the subscription ends                                                                                                     |\n| shouldResubscribe      | `boolean`{lang=ts}                                             | Determines if your subscription should be unsubscribed and subscribed again                                                                 |\n| shouldSubscribe        | `(op?: Partial<Operation<D, V>>) => boolean`{lang=ts}          | Predicate which determines whether to automatically subscribe. See [shouldSubscribe](/api/core/interfaces/subscription/#shouldsubscribe)    |\n| skip                   | `boolean`{lang=ts}                                             | When true, the subscription will not fetch at all.                                                                                          |\n| subscription           | `DocumentNode`{lang=ts}                                        | Subscription GraphQL Document                                                                                                               |\n| variables              | `Variables<D, V>`{lang=ts}                                     | Subscription variables                                                                                                                      |\n\nInherits from [ApolloControllerOptions](/api/core/controllers/controller/#options)\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#hasDisconnected",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#lastSubscriptionDocument",
              "privacy": "private",
              "type": {
                "text": "DocumentNode"
              }
            },
            {
              "kind": "field",
              "name": "subscription",
              "type": {
                "text": "ComponentDocument<D> | null"
              }
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Flags an element that's ready and able to auto-subscribe",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "canSubscribe",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V> | null, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ],
              "description": "Determines whether the element is able to automatically subscribe"
            },
            {
              "kind": "method",
              "name": "initObservable",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionDataOptions<D, V>>"
                  },
                  "description": "| Option            | Type                               | Description                                                                                                                                    |\n| ----------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| client            | `ApolloClient`{lang=ts}            | Apollo Client to use for the subscription.                                                                                                     |\n| context           | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                                                        |\n| errorPolicy       | `ErrorPolicy`{lang=ts}             | Error policy to use for the subscription. See [errorPolicy](/api/core/interfaces/mutation/#errorpolicy)                                        |\n| fetchPolicy       | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/subscription/#fetchpolicy)                                                                              |\n| shouldResubscribe | `boolean`{lang=ts}                 | Boolean, or a predicate function of `SubscriptionDataOptions` that determines if your subscription should be unsubscribed and subscribed again |\n| skip              | `boolean`{lang=ts}                 | If skip is true, the subscription will be skipped entirely.                                                                                    |\n| subscription      | `DocumentNode`{lang=ts}            | GraphQL document with a single subscription.                                                                                                   |\n| variables         | `Variables<D, V>`{lang=ts}         | An object containing all of the variables your subscription needs to execute.                                                                  |\n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "nextData",
              "privacy": "private",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "FetchResult<Data<D>>"
                  },
                  "description": "| Property   | Type                               | Description                                            |\n| ---------- | ---------------------------------- | ------------------------------------------------------ |\n| data       | `Data<D, V>`{lang=ts}              | The result of a successful execution of the mutation   |\n| errors     | `readonly GraphQLError[]`{lang=ts} | included when any errors occurred as a non-empty array |\n| extensions | `boolean`{lang=ts}                 | Reserved for adding non-standard properties            |\n| context    | `Record<string, unknown>`{lang=ts} | See [context](/api/core/interfaces/element/#context)   |\n"
                }
              ],
              "description": "Sets `data`, `loading`, and `error` on the instance when new subscription results arrive."
            },
            {
              "kind": "method",
              "name": "nextError",
              "privacy": "private",
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "ApolloError"
                  }
                }
              ],
              "description": "Sets `error` and `loading` on the instance when the subscription errors."
            },
            {
              "kind": "method",
              "name": "onComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Shuts down the subscription"
            },
            {
              "kind": "method",
              "name": "endSubscription",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "opts",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "clientChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "client",
                  "optional": true,
                  "type": {
                    "text": "ApolloClient<NormalizedCacheObject> | null"
                  }
                }
              ],
              "summary": "callback for when the Apollo client changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "doc",
                  "optional": true,
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "callback for when the GraphQL document changes.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "optional": true,
                  "type": {
                    "text": "Variables<D, V>"
                  }
                }
              ],
              "summary": "callback for when the GraphQL variables change.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionDataOptions<D, V>>"
                  },
                  "description": "| Option            | Type                               | Description                                                                                                                                    |\n| ----------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| client            | `ApolloClient`{lang=ts}            | Apollo Client to use for the subscription.                                                                                                     |\n| context           | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                                                        |\n| errorPolicy       | `ErrorPolicy`{lang=ts}             | Error policy to use for the subscription. See [errorPolicy](/api/core/interfaces/mutation/#errorpolicy)                                        |\n| fetchPolicy       | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/subscription/#fetchpolicy)                                                                              |\n| shouldResubscribe | `boolean`{lang=ts}                 | Boolean, or a predicate function of `SubscriptionDataOptions` that determines if your subscription should be unsubscribed and subscribed again |\n| skip              | `boolean`{lang=ts}                 | If skip is true, the subscription will be skipped entirely.                                                                                    |\n| subscription      | `DocumentNode`{lang=ts}            | GraphQL document with a single subscription.                                                                                                   |\n| variables         | `Variables<D, V>`{lang=ts}         | An object containing all of the variables your subscription needs to execute.                                                                  |\n"
                }
              ],
              "summary": "Starts the subscription",
              "description": ""
            },
            {
              "kind": "method",
              "name": "cancel",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "summary": "Ends the subscription",
              "description": ""
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "ApolloControllerOptions<D, V>"
              },
              "default": "{}",
              "description": "| Option      | Type                                           | Description                                                                                                       |\n| ----------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| client      | `ApolloClient<NormalizedCacheObject>`{lang=ts} | The `ApolloClient` instance for the controller.                                                                   |\n| variables   | `Variables<D, V>`{lang=ts}                     | Variables for the operation.                                                                                      |\n| context     | `any`{lang=ts}                                 | Context passed to the link execution chain.                                                                       |\n| errorPolicy | `ErrorPolicy`{lang=ts}                         | the [error policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation |\n| hostElement | `HTMLElement`{lang=ts}                         | When provided, the controller will fall back to this element to fire events                                       |\n",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#client",
              "privacy": "private",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "#document",
              "privacy": "private",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "default": "null",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "emitter",
              "type": {
                "text": "EventTarget"
              },
              "privacy": "protected",
              "summary": "The event emitter to use when firing events, usually the host element.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "default": "null",
              "summary": "Latest data for the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "ApolloError | null"
              },
              "default": "null",
              "summary": "Latest error from the operation, or `null`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "default": "[]",
              "summary": "Latest errors from the operation, or `[]`.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "summary": "Whether a request is in-flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "The `ApolloClient` instance for this controller.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "summary": "The GraphQL document for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "summary": "Variables for the operation.",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "[update]",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "properties",
                  "optional": true,
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                }
              ],
              "summary": "requests an update on the host.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "notify",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "(keyof this)[]"
                  }
                }
              ],
              "summary": "Notifies about updated properties.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            },
            {
              "kind": "method",
              "name": "init",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "summary": "Assigns the controller's variables and GraphQL document.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloController",
            "module": "/apollo-controller.js"
          },
          "events": [
            {
              "type": {
                "text": "ApolloControllerConnectedEvent"
              },
              "description": "The controller's host connected to the DOM.",
              "name": "apollo-controller-connected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            },
            {
              "type": {
                "text": "ApolloControllerDisconnectedEvent"
              },
              "description": "The controller's host disconnected from the DOM.",
              "name": "apollo-controller-disconnected",
              "inheritedFrom": {
                "name": "ApolloController",
                "module": "apollo-controller.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloSubscriptionController",
          "declaration": {
            "name": "ApolloSubscriptionController",
            "module": "apollo-subscription-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getInitialProps",
          "return": {
            "type": {
              "text": "Map<keyof T, T[keyof T]>"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getInitialProp",
          "return": {
            "type": {
              "text": "T[keyof T] | undefined"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "keyof T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setInitialProps",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setInitialProp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "keyof T"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "T[keyof T]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "controlled",
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "DefineOptions"
              },
              "description": "Options for the controlled field\n\n| Property | Type                            | Description                                                                                               |\n| -------- | ------------------------------- | --------------------------------------------------------------------------------------------------------- |\n| path     | `'options'`{lang=ts}            | Optional. When set, the field will reflect the property at the specified path, i.e. `controller.options`. |\n| readonly | `boolean`{lang=ts}              | Optional. When set, setting the field will have no effect.                                                |\n| onSet    | `(x: unknown) => void`{lang=ts} | Optional. When defined, setting the field will have no effect.                                            |\n"
            }
          ],
          "summary": "Class field decorator for controlled properties\n\nControlled properties are element class fields which defer to and reflect that property on the element's `controller` property, which is a `ReactiveController`.",
          "description": ""
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getInitialProps",
          "declaration": {
            "name": "getInitialProps",
            "module": "decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "getInitialProp",
          "declaration": {
            "name": "getInitialProp",
            "module": "decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "setInitialProps",
          "declaration": {
            "name": "setInitialProps",
            "module": "decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "setInitialProp",
          "declaration": {
            "name": "setInitialProp",
            "module": "decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "controlled",
          "declaration": {
            "name": "controlled",
            "module": "decorators.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "events.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ApolloEvent",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController"
              },
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "CustomEvent",
            "module": "events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ApolloElementEvent",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "static": true,
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "static": true,
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloEvent",
            "module": "events.ts"
          },
          "summary": "Fired when an ApolloElement connects to or disconnects from the DOM"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ApolloControllerEvent",
          "members": [
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloEvent",
            "module": "events.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ApolloControllerConnectedEvent",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              },
              "static": true,
              "default": "'apollo-controller-connected'"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              },
              "static": true,
              "default": "'apollo-controller-connected'"
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloControllerEvent",
            "module": "events.ts"
          },
          "summary": "Fired when a controlled element connects to the DOM"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ApolloControllerDisconnectedEvent",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              },
              "static": true,
              "default": "'apollo-controller-disconnected'"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ApolloEventType"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              },
              "static": true,
              "default": "'apollo-controller-disconnected'"
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloEvent",
                "module": "events.js"
              }
            }
          ],
          "superclass": {
            "name": "ApolloControllerEvent",
            "module": "events.ts"
          },
          "summary": "Fired when a controlled element disconnects from the DOM"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ApolloEvent",
          "declaration": {
            "name": "ApolloEvent",
            "module": "events.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloElementEvent",
          "declaration": {
            "name": "ApolloElementEvent",
            "module": "events.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloControllerEvent",
          "declaration": {
            "name": "ApolloControllerEvent",
            "module": "events.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloControllerConnectedEvent",
          "declaration": {
            "name": "ApolloControllerConnectedEvent",
            "module": "events.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloControllerDisconnectedEvent",
          "declaration": {
            "name": "ApolloControllerDisconnectedEvent",
            "module": "events.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./apollo-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./apollo-mutation-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./apollo-query-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./apollo-subscription-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./events.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "types.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CustomElement",
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "ControllerHost",
          "members": [
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "update",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        },
        {
          "kind": "class",
          "description": "Common base interface for apollo elements",
          "name": "ApolloElementElement",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'document'|'query'|'mutation'|'subscription'"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "privacy": "public",
              "summary": "The Apollo Client instance.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController<D, V>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.",
              "summary": "Operation document."
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "privacy": "public",
              "summary": "Latest Data.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "privacy": "public",
              "summary": "Operation variables.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "privacy": "public",
              "summary": "Latest error",
              "description": ""
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "privacy": "public",
              "summary": "Latest errors",
              "description": ""
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether a request is in flight.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "summary": "Fetch Policy for the operation.",
              "attribute": "fetch-policy",
              "description": ""
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "privacy": "public",
              "summary": "Context passed to the link execution chain.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "privacy": "public",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "attribute": "error-policy"
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "description": ""
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document"
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables"
            }
          ],
          "events": [
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element connected to the DOM",
              "name": "apollo-element-connected"
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element disconnected from the DOM",
              "name": "apollo-element-disconnected"
            }
          ],
          "attributes": [
            {
              "name": "fetch-policy",
              "type": {
                "text": "string"
              },
              "summary": "Fetch Policy for the operation.",
              "fieldName": "fetchPolicy"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy"
            }
          ],
          "superclass": {
            "name": "CustomElement",
            "module": "types.ts"
          }
        },
        {
          "kind": "class",
          "description": "Common interface for mutation elements\n\nSee [`ApolloElementInterface`](https://apolloelements.dev/api/core/interfaces/element) for more information on events",
          "name": "ApolloMutationElement",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'document'|'query'|'mutation'|'subscription'"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController<D, V>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "privacy": "public",
              "summary": "Latest mutation data",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "privacy": "public",
              "summary": "Mutation variables.",
              "description": "An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "awaitRefetchQueries",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Queries refetched as part of refetchQueries are handled asynchronously,\nand are not waited on before the mutation is completed (resolved).\nSetting this to true will make sure refetched queries are completed\nbefore the mutation is considered done. false by default.",
              "attribute": "await-refetch-queries"
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether the mutation was called.",
              "readonly": true,
              "description": ""
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "summary": "Fetch Policy for the operation.",
              "attribute": "fetch-policy",
              "description": "If set to 'no-cache', the mutation result will not update the Apollo cache.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "ignoreResults",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "If true, the returned data property will not update with the mutation result.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "mutation",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "summary": "The mutation.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "optimisticResponse",
              "type": {
                "text": "OptimisticResponseType<D, V>"
              },
              "privacy": "public",
              "description": "An object that represents the result of this mutation that\nwill be optimistically stored before the server has actually returned a\nresult.\n\nThis is most often used for optimistic UI, where we want to be able to see\nthe result of a mutation immediately, and update the UI later if any errors\nappear."
            },
            {
              "kind": "field",
              "name": "refetchQueries",
              "type": {
                "text": "RefetchQueriesType<D> | null"
              },
              "privacy": "public",
              "description": "A list of query names which will be refetched once this mutation has returned.\nThis is often used if you have a set of queries which may be affected by a mutation and will have to update.\nRather than writing a mutation query reducer (i.e. `updateQueries`) for this,\nyou can refetch the queries that will be affected\nand achieve a consistent store once these queries return.",
              "attribute": "refetch-queries"
            },
            {
              "kind": "method",
              "name": "onCompleted",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_data",
                  "type": {
                    "text": "Data<D>"
                  }
                }
              ],
              "description": "Callback for when a mutation is completed."
            },
            {
              "kind": "method",
              "name": "onError",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_error",
                  "type": {
                    "text": "Error"
                  }
                }
              ],
              "description": "Callback for when an error occurs in mutation."
            },
            {
              "kind": "method",
              "name": "updater",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ReturnType<MutationUpdaterFn<Data<D>, Variables<D, V>>>"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "Parameters<MutationUpdaterFn<Data<D>, Variables<D, V>>>"
                  }
                }
              ],
              "description": "A function which updates the apollo cache when the query responds.\nThis function will be called twice over the lifecycle of a mutation.\nOnce at the very beginning if an optimisticResponse was provided.\nThe writes created from the optimistic data will be rolled back before\nthe second time this function is called which is when the mutation has\nsuccesfully resolved. At that point update will be called with the actual\nmutation result and those writes will not be rolled back.\n\nThe reason a DataProxy is provided instead of the user calling the methods\ndirectly on ApolloClient is that all of the writes are batched together at\nthe end of the update, and it allows for writes generated by optimistic\ndata to be rolled back.\n\n### Examples\n\n<figure class=\"example\"><figcaption>Updating a query</figcaption>\n\n```js\nupdater(cache, result) {\n  cache.writeQuery({\n    query: MyProfileQuery,\n    data: { profile: result.data.updateMyProfile },\n  });\n}\n```\n\n</figure>"
            },
            {
              "kind": "method",
              "name": "mutate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<FetchResult<Data<D>>>"
                },
                "description": "| Property   | Type                               | Description                                            |\n| ---------- | ---------------------------------- | ------------------------------------------------------ |\n| data       | `Data<D, V>`{lang=ts}              | The result of a successful execution of the mutation   |\n| errors     | `readonly GraphQLError[]`{lang=ts} | included when any errors occurred as a non-empty array |\n| extensions | `boolean`{lang=ts}                 | Reserved for adding non-standard properties            |\n| context    | `Record<string, unknown>`{lang=ts} | See [context](/api/core/interfaces/element/#context)   |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<MutationOptions<Data<D>, Variables<D, V>>>"
                  },
                  "description": "All named arguments to mutate default to the element's corresponding instance property. So you can call `element.mutate()` without arguments and it will call using `element.mutation`, `element.variables`, etc. You can likewise override instance properties per-call by passing them in, e.g.\n\n```ts\nawait element.mutate({\n  fetchPolicy: 'network-only'\n  variables: {\n    ...element.variables,\n    name: 'overridden',\n  },\n});\n```\n\n| Property            | Type                                                   | Description                                                                   |\n| ------------------- | ------------------------------------------------------ | ----------------------------------------------------------------------------- |\n| awaitRefetchQueries | `boolean`{lang=ts}                                     | See [awaitRefetchQueries](/api/core/interfaces/mutation/#awaitrefetchqueries) |\n| context             | `Record<string, unknown>`{lang=ts}                     | See [context](/api/core/interfaces/element/#context)                          |\n| errorPolicy         | `ErrorPolicy`{lang=ts}                                 | See [errorPolicy](/api/core/interfaces/element/#errorpolicy)                  |\n| fetchPolicy         | `FetchPolicy`{lang=ts}                                 | See [fetchPolicy](/api/core/interfaces/mutation/#fetchpolicy)                 |\n| mutation            | `DocumentNode`{lang=ts}                                | See [mutation](/api/core/interfaces/mutation/#mutation)                       |\n| optimisticResponse  | `OptimisticResponseType<D, V>`{lang=ts}                | See [optimisticResponse](/api/core/interfaces/mutation/#optimisticresponse)   |\n| refetchQueries      | `RefetchQueriesType<D, V>`{lang=ts}                    | See [refetchQueries](/api/core/interfaces/mutation/#refetchqueries)           |\n| update              | `MutationUpdaterFn<Data<D>, Variables<D, V>>`{lang=ts} | See [updater](/api/core/interfaces/mutation/#updater)                         |\n| variables           | `Variables<D, V>`{lang=ts}                             | See [variables](/api/core/interfaces/mutation/#variables)                     |\n"
                }
              ],
              "description": "This resolves a single mutation according to the options specified and returns a\nPromise which is either resolved with the resulting data or rejected with an error."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "privacy": "public",
              "summary": "The Apollo Client instance.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.",
              "summary": "Operation document.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "privacy": "public",
              "summary": "Latest error",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "privacy": "public",
              "summary": "Latest errors",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether a request is in flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "privacy": "public",
              "summary": "Context passed to the link execution chain.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "privacy": "public",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "attribute": "error-policy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent<FetchResult<Data<D>>>"
              },
              "description": "The mutation resolved",
              "name": "apollo-mutation-result"
            },
            {
              "type": {
                "text": "CustomEvent<ApolloError>"
              },
              "description": "The mutation rejected",
              "name": "apollo-error"
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element connected to the DOM",
              "name": "apollo-element-connected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element disconnected from the DOM",
              "name": "apollo-element-disconnected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "await-refetch-queries",
              "type": {
                "text": "boolean"
              },
              "description": "Queries refetched as part of refetchQueries are handled asynchronously,\nand are not waited on before the mutation is completed (resolved).\nSetting this to true will make sure refetched queries are completed\nbefore the mutation is considered done. false by default.",
              "fieldName": "awaitRefetchQueries"
            },
            {
              "name": "fetch-policy",
              "type": {
                "text": "string"
              },
              "summary": "Fetch Policy for the operation.",
              "fieldName": "fetchPolicy",
              "description": "If set to 'no-cache', the mutation result will not update the Apollo cache.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "name": "refetch-queries",
              "type": {
                "text": "RefetchQueriesType<D> | null"
              },
              "description": "A list of query names which will be refetched once this mutation has returned.\nThis is often used if you have a set of queries which may be affected by a mutation and will have to update.\nRather than writing a mutation query reducer (i.e. `updateQueries`) for this,\nyou can refetch the queries that will be affected\nand achieve a consistent store once these queries return.",
              "fieldName": "refetchQueries"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "superclass": {
            "name": "ApolloElementElement",
            "module": "types.ts"
          }
        },
        {
          "kind": "class",
          "description": "Common interface for query elements\n\nSee [`ApolloElementInterface`](https://apolloelements.dev/api/core/interfaces/element) for more information on events",
          "name": "ApolloQueryElement",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'document'|'query'|'mutation'|'subscription'"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController<D, V>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "privacy": "public",
              "summary": "The latest query data.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "privacy": "public",
              "summary": "Query variables.",
              "description": "An object map from variable name to variable value, where the variables are used within the GraphQL query.\n\nSetting variables will initiate the query, unless [`noAutoSubscribe`](#noautosubscribe) is also set.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "summary": "The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.",
              "attribute": "fetch-policy",
              "description": "Determines where the client may return a result from. The options are:\n\n- `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n- `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n- `cache-only`: return result from cache if available, fail otherwise.\n- `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n- `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n- `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Flags an element that's ready and able to auto subscribe",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ApolloQueryControllerOptions<D, V>"
              },
              "privacy": "public",
              "description": "| Option          | Type                                                  | Description                                                                                                                               |\n| --------------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| fetchPolicy     | `WatchQueryFetchPolicy`{lang=ts}                      | The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.                             |\n| variables       | `Variables<D, V>`{lang=ts}                            | Variables for the query.                                                                                                                  |\n| noAutoSubscribe | `boolean`{lang=ts}                                    | If true, the element will not begin querying data until you manually call `subscribe`                                                     |\n| shouldSubscribe | `(op?: Partial<Operation<D, V>>) => boolean`{lang=ts} | Determines whether the element should attempt to subscribe automatically\\\\nOverride to prevent subscribing unless your conditions are met |\n| onData          | `(data: Data<D>) => void`{lang=ts}                    | Optional callback for when a query resolves.                                                                                              |\n| onError         | `(error: Error) => void`{lang=ts}                     | Optional callback for when an error occurs.                                                                                               |\n\nInherits from [ApolloControllerOptions](/api/core/controllers/controller/#options)\n"
            },
            {
              "kind": "field",
              "name": "networkStatus",
              "type": {
                "text": "NetworkStatus"
              },
              "privacy": "public",
              "description": "`networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\ndepending on your network status as it provides a more detailed view into the state of a network request\non your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\nThese number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query’s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\nreplace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\nIt is recommended that you use `loading`, however."
            },
            {
              "kind": "field",
              "name": "nextFetchPolicy",
              "type": {
                "text": "WatchQueryFetchPolicy | NextFetchPolicyFunction<D, V>"
              },
              "privacy": "public",
              "description": "When someone chooses cache-and-network or network-only as their\ninitial FetchPolicy, they often do not want future cache updates to\ntrigger unconditional network requests, which is what repeatedly\napplying the cache-and-network or network-only policies would seem\nto imply. Instead, when the cache reports an update after the\ninitial network request, it may be desirable for subsequent network\nrequests to be triggered only if the cache result is incomplete.\nThe nextFetchPolicy option provides a way to update\noptions.fetchPolicy after the intial network request, without\nhaving to set options.",
              "summary": "Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`.",
              "attribute": "next-fetch-policy"
            },
            {
              "kind": "field",
              "name": "noAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the component will not automatically subscribe to new data.\nCall the `subscribe()` method to do so.",
              "attribute": "no-auto-subscribe"
            },
            {
              "kind": "field",
              "name": "notifyOnNetworkStatusChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether or not updates to the network status should trigger next on the observer of this query.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "partial",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "If data was read from the cache with missing fields,\npartial will be true. Otherwise, partial will be falsy.",
              "summary": "True when the query returned partial data.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "partialRefetch",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "If true, perform a query refetch if the query result is marked as being partial,\nand the returned data is reset to an empty Object by the Apollo Client QueryManager\n(due to a cache miss).\n\nThe default value is false for backwards-compatibility's sake,\nbut should be changed to true for most use-cases.",
              "summary": "Set to retry any partial query results."
            },
            {
              "kind": "field",
              "name": "pollInterval",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "summary": "The time interval (in milliseconds) on which this query should be refetched from the server.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "DocumentNode | ComponentDocument<D> | null"
              },
              "privacy": "public",
              "summary": "A GraphQL document containing a single query.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "returnPartialData",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Opt into receiving partial results from the cache for queries\nthat are not fully satisfied by the cache."
            },
            {
              "kind": "method",
              "name": "onData",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Data<D>"
                  },
                  "description": "the query data."
                }
              ],
              "description": "Optional callback for when a query is completed."
            },
            {
              "kind": "method",
              "name": "onError",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "Error"
                  },
                  "description": "the error."
                }
              ],
              "description": "Optional callback for when an error occurs."
            },
            {
              "kind": "method",
              "name": "refetch",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variables<D, V>"
                  },
                  "description": "The new set of variables. If there are missing variables, the previous values of those variables will be used.."
                }
              ],
              "description": "Update the variables of this observable query, and fetch the new results."
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ],
              "description": "Determines whether the element should attempt to subscribe i.e. begin querying\nOverride to prevent subscribing unless your conditions are met"
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ZenObservable.Subscription"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ],
              "description": "Resets the internal state of the query and subscribes."
            },
            {
              "kind": "method",
              "name": "subscribeToMore",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void | (() => void)"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "SubscribeToMoreOptions<Data<D>, TSubscriptionVariables, TSubscriptionData>"
                  }
                }
              ],
              "description": "Lets you pass a GraphQL subscription and updateQuery function\nto subscribe to more updates for your query.\n\nThe `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results."
            },
            {
              "kind": "method",
              "name": "executeQuery",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<QueryOptions<Variables<D, V>, Data<D>>> | undefined"
                  },
                  "description": "| Option      | Type                               | Description                                                                                              |\n| ----------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | A GraphQL document that consists of a single query to be sent down to the server.                        |\n| variables   | `Variables<D, V>`{lang=ts}         | A map going from variable name to variable value, where the variables are used within the GraphQL query. |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | Specifies the [`fetchPolicy`](/api/core/interfaces/query/#fetchpolicy) to be used for this query.        |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | Specifies the [`ErrorPolicy`](/api/core/interfaces/element/#errorpolicy) to be used for this query.      |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                  |\n"
                }
              ],
              "description": "Executes a Query once and updates the component with the result"
            },
            {
              "kind": "method",
              "name": "fetchMore",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ApolloQueryResult<Data<D>>>"
                },
                "description": "| Property      | Type                               | Description                                                                       |\n| ------------- | ---------------------------------- | --------------------------------------------------------------------------------- |\n| data          | `Data<D>`{lang=ts}                 | If the query resolved, the data.                                                  |\n| error         | `ApolloError`{lang=ts}             | If the query rejected, the error.                                                 |\n| errors        | `readonly GraphQLError[]`{lang=ts} | If the query returned partials results, and some were errors, the list of errors. |\n| loading       | `boolean`{lang=ts}                 | Whether the operation is in-flight.                                               |\n| partial       | `boolean`{lang=ts}                 | Whether the query returned partial data.                                          |\n| networkStatus | `NetworkStatus`{lang=ts}           | See [NetworkStatus](#networkstatus).                                              |\n"
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<FetchMoreParams<D, V>> | undefined"
                  },
                  "description": "| Option      | Type                               | Description                                                                                                      |\n| ----------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | Query to fetch, defaults to `this.query`                                                                         |\n| updateQuery | `Function`{lang=ts}                | Function to determine how to update the cache when the query resolves. (deprecated - use field policies instead) |\n| variables   | `Variables<D, V>`{lang=ts}         | Query variables                                                                                                  |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                          |\n"
                }
              ],
              "description": "Exposes the `ObservableQuery#fetchMore` method.\nhttps://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore\n\nThe optional `updateQuery` parameter is a function that takes the previous query data,\nthen a `{ subscriptionData: TSubscriptionResult }` object,\nand returns an object with updated query data based on the new results.\n\nThe optional `variables` parameter is an optional new variables object."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "privacy": "public",
              "summary": "The Apollo Client instance.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.",
              "summary": "Operation document.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "privacy": "public",
              "summary": "Latest error",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "privacy": "public",
              "summary": "Latest errors",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether a request is in flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "privacy": "public",
              "summary": "Context passed to the link execution chain.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "privacy": "public",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "attribute": "error-policy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent<ApolloQueryResult<Data<D>>>"
              },
              "description": "The query resolved",
              "name": "apollo-query-result"
            },
            {
              "type": {
                "text": "CustomEvent<ApolloError>"
              },
              "description": "The query rejected",
              "name": "apollo-error"
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element connected to the DOM",
              "name": "apollo-element-connected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element disconnected from the DOM",
              "name": "apollo-element-disconnected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fetch-policy",
              "type": {
                "text": "string"
              },
              "summary": "The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query.",
              "fieldName": "fetchPolicy",
              "description": "Determines where the client may return a result from. The options are:\n\n- `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n- `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n- `cache-only`: return result from cache if available, fail otherwise.\n- `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n- `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n- `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "name": "next-fetch-policy",
              "type": {
                "text": "WatchQueryFetchPolicy | NextFetchPolicyFunction<D, V>"
              },
              "description": "When someone chooses cache-and-network or network-only as their\ninitial FetchPolicy, they often do not want future cache updates to\ntrigger unconditional network requests, which is what repeatedly\napplying the cache-and-network or network-only policies would seem\nto imply. Instead, when the cache reports an update after the\ninitial network request, it may be desirable for subsequent network\nrequests to be triggered only if the cache result is incomplete.\nThe nextFetchPolicy option provides a way to update\noptions.fetchPolicy after the intial network request, without\nhaving to set options.",
              "summary": "Set to prevent subsequent network requests when the fetch policy is `cache-and-network` or `network-only`.",
              "fieldName": "nextFetchPolicy"
            },
            {
              "name": "no-auto-subscribe",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the component will not automatically subscribe to new data.\nCall the `subscribe()` method to do so.",
              "fieldName": "noAutoSubscribe"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "superclass": {
            "name": "ApolloElementElement",
            "module": "types.ts"
          }
        },
        {
          "kind": "class",
          "description": "Common interface for subscription elements\n\nSee [`ApolloElementInterface`](https://apolloelements.dev/api/core/interfaces/element) for more information on events",
          "name": "ApolloSubscriptionElement",
          "members": [
            {
              "kind": "field",
              "name": "documentType",
              "type": {
                "text": "'document'|'query'|'mutation'|'subscription'"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "controller",
              "type": {
                "text": "ApolloController<D, V>"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Data<D> | null"
              },
              "privacy": "public",
              "summary": "Latest Data.",
              "description": "Latest subscription data.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "type": {
                "text": "Variables<D, V> | null"
              },
              "privacy": "public",
              "summary": "Subscription variables.",
              "description": "An object map from variable name to variable value, where the variables are used within the GraphQL subscription.\n\nSetting variables will initiate the subscription, unless [`noAutoSubscribe`](#noautosubscribe) is also set.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "subscription",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "summary": "A GraphQL document containing a single subscription.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "canAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Flags an element that's ready and able to auto subscribe",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "summary": "Specifies the FetchPolicy to be used for this subscription.",
              "attribute": "fetch-policy",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "pollInterval",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "summary": "The time interval (in milliseconds) on which this subscription should be refetched from the server.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "noAutoSubscribe",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "If true, the element will not begin querying data until you manually call `subscribe`",
              "attribute": "no-auto-subscribe",
              "description": ""
            },
            {
              "kind": "field",
              "name": "notifyOnNetworkStatusChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether or not updates to the network status should trigger next on the observer of this subscription.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "shouldResubscribe",
              "type": {
                "text": "boolean | ((options: SubscriptionDataOptions<Data<D>, Variables<D, V>>) => boolean)"
              },
              "privacy": "public",
              "summary": "Determines if your subscription should be unsubscribed and subscribed again.",
              "description": ""
            },
            {
              "kind": "field",
              "name": "skip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "If true, the query will be skipped entirely",
              "description": ""
            },
            {
              "kind": "method",
              "name": "onSubscriptionData",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_result",
                  "type": {
                    "text": "OnSubscriptionDataParams<Data<D>>"
                  }
                }
              ],
              "description": "Callback for when data is updated"
            },
            {
              "kind": "method",
              "name": "onSubscriptionComplete",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Callback for when subscription completes."
            },
            {
              "kind": "method",
              "name": "onError",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "ApolloError"
                  }
                }
              ],
              "description": "Callback for when error is updated"
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionDataOptions<D, V>>"
                  },
                  "description": "| Option            | Type                               | Description                                                                                                                                    |\n| ----------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| client            | `ApolloClient`{lang=ts}            | Apollo Client to use for the subscription.                                                                                                     |\n| context           | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.                                                                                        |\n| errorPolicy       | `ErrorPolicy`{lang=ts}             | Error policy to use for the subscription. See [errorPolicy](/api/core/interfaces/mutation/#errorpolicy)                                        |\n| fetchPolicy       | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/subscription/#fetchpolicy)                                                                              |\n| shouldResubscribe | `boolean`{lang=ts}                 | Boolean, or a predicate function of `SubscriptionDataOptions` that determines if your subscription should be unsubscribed and subscribed again |\n| skip              | `boolean`{lang=ts}                 | If skip is true, the subscription will be skipped entirely.                                                                                    |\n| subscription      | `DocumentNode`{lang=ts}            | GraphQL document with a single subscription.                                                                                                   |\n| variables         | `Variables<D, V>`{lang=ts}         | An object containing all of the variables your subscription needs to execute.                                                                  |\n"
                }
              ],
              "summary": "Resets the subscription and subscribes.",
              "description": ""
            },
            {
              "kind": "method",
              "name": "cancel",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "summary": "Cancels and clears the subscription",
              "description": ""
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property    | Type                               | Description                                                |\n| ----------- | ---------------------------------- | ---------------------------------------------------------- |\n| query       | `DocumentNode`{lang=ts}            | See [query](/api/core/controllers/query/#query)            |\n| variables   | `Variables<D, V>`{lang=ts}         | See [variables](/api/core/controllers/query/#variables)    |\n| fetchPolicy | `FetchPolicy`{lang=ts}             | See [fetchPolicy](/api/core/interfaces/query/#fetchpolicy) |\n| errorPolicy | `ErrorPolicy`{lang=ts}             | See [errorPolicy](/api/core/interfaces/query/#errorpolicy) |\n| context     | `Record<string, unknown>`{lang=ts} | Context object passed through the link execution chain.    |\n"
                }
              ],
              "description": "Determines whether the element should attempt to subscribe automatically\nOverride to prevent subscribing unless your conditions are met"
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "ApolloClient<NormalizedCacheObject> | null"
              },
              "privacy": "public",
              "summary": "The Apollo Client instance.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "privacy": "public",
              "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.",
              "summary": "Operation document.",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "Error | ApolloError | null"
              },
              "privacy": "public",
              "summary": "Latest error",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "readonly GraphQLError[]"
              },
              "privacy": "public",
              "summary": "Latest errors",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "Whether a request is in flight.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "Record<string, unknown>"
              },
              "privacy": "public",
              "summary": "Context passed to the link execution chain.",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "type": {
                "text": "ErrorPolicy"
              },
              "privacy": "public",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "attribute": "error-policy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "field",
              "name": "readyToReceiveDocument",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "summary": "True when the element is connected and ready to receive its GraphQL document",
              "description": "",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "ComponentDocument<D> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the GraphQL document",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variables<D, V> | null"
                  }
                }
              ],
              "description": "Lifecycle callback that reacts to changes in the operation variables",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "ApolloSubscriptionResultEvent"
              },
              "description": "The subscription updated",
              "name": "apollo-subscription-result"
            },
            {
              "type": {
                "text": "CustomEvent<ApolloError>"
              },
              "description": "The subscription produced an error",
              "name": "apollo-error"
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element connected to the DOM",
              "name": "apollo-element-connected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "type": {
                "text": "ApolloElementEvent"
              },
              "description": "The element disconnected from the DOM",
              "name": "apollo-element-disconnected",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fetch-policy",
              "type": {
                "text": "string"
              },
              "summary": "Specifies the FetchPolicy to be used for this subscription.",
              "fieldName": "fetchPolicy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            },
            {
              "name": "no-auto-subscribe",
              "type": {
                "text": "boolean"
              },
              "summary": "If true, the element will not begin querying data until you manually call `subscribe`",
              "fieldName": "noAutoSubscribe"
            },
            {
              "name": "error-policy",
              "type": {
                "text": "ErrorPolicy"
              },
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL errors\nfrom the server are sent to your UI code. By default, the error policy treats any\nGraphQL Errors as network errors and ends the request chain.\nIt doesn't save any data in the cache, and renders your UI with the error property\nset to an `ApolloError`. By changing this policy per request, you can adjust how\nGraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n- `none` (default): any errors from the request are treated like runtime errors and the observable is stopped (XXX this is default to lower breaking changes going from AC 1.0 => 2.0)\n- `ignore`: errors from the request do not stop the observable, but also don't call `next`\n- `all`: errors are treated like data and will notify observables",
              "summary": "[Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) for the operation.",
              "fieldName": "errorPolicy",
              "inheritedFrom": {
                "name": "ApolloElementElement",
                "module": "types.ts"
              }
            }
          ],
          "superclass": {
            "name": "ApolloElementElement",
            "module": "types.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CustomElement",
          "declaration": {
            "name": "CustomElement",
            "module": "types.js"
          }
        },
        {
          "kind": "js",
          "name": "ControllerHost",
          "declaration": {
            "name": "ControllerHost",
            "module": "types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloElementElement",
          "declaration": {
            "name": "ApolloElementElement",
            "module": "types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloMutationElement",
          "declaration": {
            "name": "ApolloMutationElement",
            "module": "types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloQueryElement",
          "declaration": {
            "name": "ApolloQueryElement",
            "module": "types.js"
          }
        },
        {
          "kind": "js",
          "name": "ApolloSubscriptionElement",
          "declaration": {
            "name": "ApolloSubscriptionElement",
            "module": "types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/bound.js",
      "declarations": [
        {
          "kind": "function",
          "name": "bound",
          "return": {
            "type": {
              "text": "PropertyDescriptor"
            }
          },
          "parameters": [
            {
              "name": "_",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "descriptor",
              "type": {
                "text": "PropertyDescriptor"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bound",
          "declaration": {
            "name": "bound",
            "module": "lib/bound.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/create-apollo-client.js",
      "declarations": [
        {
          "kind": "function",
          "name": "createApolloClient",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "Options"
              },
              "description": "Limited configuration options for the client."
            }
          ],
          "description": "Creates a simple ApolloClient"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createApolloClient",
          "declaration": {
            "name": "createApolloClient",
            "module": "lib/create-apollo-client.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/has-all-variables.js",
      "declarations": [
        {
          "kind": "function",
          "name": "hasAllVariables",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "operation",
              "type": {
                "text": "Partial<Operation>"
              },
              "description": "The GraphQL operation to validate."
            }
          ],
          "description": "Checks whether an operation includes all its non-nullable variables.\nNote that this can't check properties of Input types defined in schema,\nonly top-level variables.\n\n```haskell\nhasAllVariables :: Operation -> Bool\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hasAllVariables",
          "declaration": {
            "name": "hasAllVariables",
            "module": "lib/has-all-variables.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "splitCommasAndTrim",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Splits a string by `,` then trims each of the results"
        },
        {
          "kind": "function",
          "name": "isEmpty",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "x",
              "type": {
                "text": "ObjectOrArray"
              },
              "description": "object or array"
            }
          ],
          "description": "Is an object or array empty?"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "splitCommasAndTrim",
          "declaration": {
            "name": "splitCommasAndTrim",
            "module": "lib/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "isEmpty",
          "declaration": {
            "name": "isEmpty",
            "module": "lib/helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/is-client-operation.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isClientOperation",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "operation",
              "type": {
                "text": "Operation"
              },
              "description": "Operation to check"
            }
          ],
          "description": "Helper to determine whether an operation is client-side-only\n\n```haskell\nisClientOperation :: Operation -> Bool\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isClientOperation",
          "declaration": {
            "name": "isClientOperation",
            "module": "lib/is-client-operation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "lib/is-valid-gql.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isValidGql",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "doc",
              "type": {
                "text": "unknown"
              },
              "description": "Maybe a DocumentNode"
            }
          ],
          "description": "Validates a graphql document node.\n\n```haskell\nisValidGql :: DocumentNode a => a -> Bool\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isValidGql",
          "declaration": {
            "name": "isValidGql",
            "module": "lib/is-valid-gql.js"
          }
        }
      ]
    }
  ]
}
