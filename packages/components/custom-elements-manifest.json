{
  "schemaVersion": "1",
  "$schema": "https://raw.githubusercontent.com/webcomponents/custom-elements-manifest/master/schema.json",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "./index.js",
      "declarations": [],
      "exports": [
        {
          "name": "apollo-client",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-client",
            "module": "./apollo-client.js"
          }
        },
        {
          "name": "apollo-query",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-query",
            "module": "./apollo-query.js"
          }
        },
        {
          "name": "apollo-mutation",
          "kind": "custom-element-definition",
          "declaration": {
            "name": "apollo-mutation",
            "module": "./apollo-mutation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-client.js",
      "declarations": [
        {
          "kind": "class",
          "name": "ApolloClientElement",
          "tagName": "apollo-client",
          "summary": "\nProvides an ApolloClient instance to all nested ApolloElement children, even across (open) shadow boundaries.\n\n## Examples\n### Generate a simple ApolloClient instance\n```html\n<apollo-client uri=\"/graphql\"></apollo-client>\n```\n\n### Prevent network calls when required variables are absent\n```html\n<apollo-client uri=\"/graphql\" validate-variables></apollo-client>\n```\n\n### Providing a client to a tree of Nodes\n```html\n<apollo-client id=\"client-a\">\n  <apollo-query>\n    <!--...-->\n  </apollo-query>\n</apollo-client>\n```\n\n### Nesting separate clients\n```html\n<apollo-client id=\"client-a\">\n  <query-element>\n    <!-- This element queries from client-a's endpoint -->\n  </query-element>\n  <apollo-client id=\"client-b\">\n    <query-element>\n      <!-- This element queries from client-b's endpoint -->\n    </query-element>\n  </apollo-client>\n</apollo-client>\n```\n",
          "attributes": [
            {
              "name": "uri",
              "type": {
                "type": "string"
              },
              "fieldName": "uri"
            },
            {
              "name": "validate-variables",
              "type": {
                "type": "boolean"
              },
              "fieldName": "validateVariables"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "uri",
              "reflects": true,
              "type": {
                "type": "string"
              },
              "summary": "When the URI attribute is set, `<apollo-client>` will asynchronously create a new ApolloClient instance with some default parameters."
            },
            {
              "kind": "field",
              "name": "client",
              "type": {
                "type": "ApolloClient<NormalizedCacheObject> | null"
              },
              "summary": "Reference to the `ApolloClient` instance."
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "type": "readonly ApolloElementElement[]"
              },
              "readonly": true,
              "summary": "List of all ApolloElements registered to this client."
            },
            {
              "kind": "field",
              "name": "typePolicies",
              "optional": true,
              "summary": "Type Policies for the client.",
              "type": {
                "type": "TypePolicies"
              }
            },
            {
              "kind": "field",
              "name": "validateVariables",
              "summary": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
              "type": {
                "type": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "createApolloClient",
              "async": true,
              "return": {
                "summary": "A simple ApolloClient instance",
                "type": {
                  "type": "Promise<ApolloClient<NormalizedCacheObject>>"
                }
              }
            }
          ],
          "events": [
            {
              "name": "client-changed",
              "description": "Fired when the client instance changes. Compatible with Polymer-style two-way binding.",
              "type": {
                "type": "CustomEvent<{ value: ApolloClient, client: ApolloClient }>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-client",
          "declaration": {
            "name": "ApolloClientElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloClientElement",
          "declaration": {
            "name": "ApolloClientElement"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-query.js",
      "declarations": [
        {
          "kind": "class",
          "tagName": "apollo-query",
          "name": "ApolloQueryElement",
          "summary": "Render a GraphQL query using HTML.",
          "description": "### Example: Render a query to shadow DOM\n\n```html\n<apollo-query>\n  <script type=\"application/graphql\">\n    query MyProfile {\n      profile { name picture }\n    }\n  </script>\n  <template>\n    <img loading=\"lazy\" src=\"{{ data.profile.picture }}\" alt=\"{{ data.profile.name }}\"/>\n  </template>\n</apollo-query>\n```\n\n### Example: Setting query and variables using the DOM \n```html \n<apollo-query id=\"query-element\" template=\"avatar-template\"></apollo-query> \n \n<template id=\"avatar-template\"> \n  <img loading=\"lazy\" src=\"{{ data.profile.picture }}\" alt=\"{{ data.profile.name }}\"/> \n</template> \n \n<script type=\"module\"> \n  import { gql } from '@apollo/client/core'; \n  const el = document.getElementById('query-element'); \n  el.query = gql` \n    query MyProfile($size: Int) { \n      profile { name picture(size: $size) } \n    } \n  `; \n  el.variables = { size: 48 }; \n</script> \n```",
          "attributes": [
            {
              "name": "template",
              "fieldName": "template",
              "type": {
                "type": "string"
              }
            },
            {
              "name": "no-shadow",
              "description": "When set, the element will render to a `<div>` in its light DOM. If set with a string, the string will be the div's class name.",
              "type": {
                "type": "Boolean|string"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "template",
              "description": "Template element for the query. Can either be a light-DOM child of the element, or referenced by ID with the `template` attribute.\n\n#### Example: Referencing a template by ID\n\n```html\n<apollo-query template=\"tpl\"></apollo-query>\n<template id=\"tpl\">\n  <p>Hi, {%raw%}{{ data.name }}{%endraw%}</p>\n</template>\n```\n",
              "type": {
                "type": "HTMLTemplateElement|null"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "summary": "Render the template.",
              "return": {
                "type": {
                  "type": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "query",
              "description": "A GraphQL document containing a single query. You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).\n\n```html\n<script type=\"application/graphql\">\n  query { helloWorld }\n</script>\n```",
              "type": {
                "type": "DocumentNode | TypedDocumentNode",
                "references": [
                  {
                    "name": "DocumentNode",
                    "start": 0,
                    "end": 12
                  },
                  {
                    "name": "TypedDocumentNode",
                    "start": 16,
                    "end": 32
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "optional": true,
              "description": "Determines where the client may return a result from. The options are:\n\n- `cache-first` (default): return result from cache, fetch from network if cached result is not available.\n- `cache-and-network`: return result from cache first (if it exists), then return network result once it's available.\n- `cache-only`: return result from cache if available, fail otherwise.\n- `no-cache`: return result from network, fail if network call doesn't succeed, don't save to cache\n- `network-only`: return result from network, fail if network call doesn't succeed, save to cache\n- `standby`: only for queries that aren't actively watched, but should be available for refetch and updateQueries.\n",
              "type": {
                "type": "FetchPolicy"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "nextFetchPolicy",
              "optional": true,
              "description": "When someone chooses `cache-and-network` or `network-only` as their initial `FetchPolicy`, they often do not want future cache updates to trigger unconditional network requests, which is what repeatedly applying the `cache-and-network` or `network-only` policies would seem to imply. Instead, when the cache reports an update after the initial network request, it may be desirable for subsequent network requests to be triggered only if the cache result is incomplete. The `nextFetchPolicy` option provides a way to update `options.fetchPolicy` after the intial network request, without having to set options.",
              "type": {
                "type": "FetchPolicy"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "partial",
              "description": "If data was read from the cache with missing fields, partial will be true. Otherwise, partial will be falsy.",
              "optional": true,
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "partialRefetch",
              "optional": true,
              "description": "If true, perform a query refetch if the query result is marked as being partial, and the returned data is reset to an empty Object by the Apollo Client QueryManager (due to a cache miss). The default value is false for backwards-compatibility's sake, but should be changed to true for most use-cases.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "returnPartialData",
              "optional": true,
              "description": "Opt into receiving partial results from the cache for queries that are not fully satisfied by the cache.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "networkStatus",
              "description": "\n`networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\ndepending on your network status as it provides a more detailed view into the state of a network request\non your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\nThese number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query’s variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\nreplace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\nIt is recommended that you use `loading`, however.\n",
              "type": {
                "type": "NetworkStatus"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "observableQuery",
              "optional": true,
              "summary": "The `ObservableQuery` watching this element's query.",
              "type": {
                "type": "ObservableQuery<Data<D>, Variables<D, V>>"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "summary": "Set to reobserve the `ObservableQuery`",
              "type": {
                "type": "Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> | null"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "notifyOnNetworkStatusChange",
              "optional": true,
              "description": "Whether or not updates to the network status should trigger next on the observer of this query.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "pollInterval",
              "optional": true,
              "description": "The time interval (in milliseconds) on which this query should be refetched from the server.",
              "type": {
                "type": "number"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "optional": true,
              "summary": "Specifies the [Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) to be used for this query.",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL Errors from the server are sent to your UI code. By default, the error policy treats any GraphQL Errors as network errors and ends the request chain. It doesn't save any data in the cache, and renders your UI with the error property set to an `ApolloError`. By changing this policy per request, you can adjust how GraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n\n- `none`: This is the default policy to match how Apollo Client 1.0 worked. Any GraphQL Errors are treated the same as network errors and any data is ignored from the response.\n- `ignore`: Ignore allows you to read any data that is returned alongside GraphQL Errors, but doesn't save the errors or report them to your UI.\n- `all`: Using the all policy is the best way to notify your users of potential issues while still showing as much data as possible from your server. It saves both data and errors so your UI can use them.\n",
              "type": {
                "type": "ErrorPolicy"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAutoSubscribe",
              "reflects": true,
              "description": "When true, the component will not automatically subscribe to new data. Call the `subscribe()` method to do so.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "refetch",
              "async": true,
              "description": "Update the variables of this observable query, and fetch the new results.",
              "parameters": [
                {
                  "name": "variables",
                  "summary": "Partial new set of variables. If there are missing variables, the previous values of those variables will be used.",
                  "type": {
                    "type": "Variables<D, V>"
                  }
                }
              ],
              "return": {
                "summary": "Result of the query operation",
                "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | If the query resolved, the data. |\n| error | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloError</code></pre> | If the query rejected, the error. |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | If the query returned partials results, and some were errors, the list of errors. |\n| loading | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the operation is in-flight. |\n| partial | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the query returned partial data. |\n| networkStatus | <pre class=\"language-ts\"><code class=\"language-ts\">NetworkStatus</code></pre> | See [NetworkStatus](#networkstatus). |\n",
                "type": {
                  "type": "Promise<ApolloQueryResult<Data<D>>>"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "shouldSubscribe",
              "privacy": "protected",
              "description": "Determines whether the element should attempt to subscribe i.e. begin querying. Override to prevent subscribing unless your conditions are met.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "type": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  },
                  "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| query | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | See [query](#query) |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | See [variables](#variables) |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [fetchPolicy](#fetchpolicy) |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | See [errorPolicy](#errorpolicy) |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n"
                }
              ],
              "return": {
                "type": {
                  "type": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "subscribe",
              "summary": "Resets the observableQuery and subscribes.",
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "summary": "Options to control how the component subscribes to its `ObservableQuery`",
                  "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| query | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | See [query](#query) |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | See [variables](#variables) |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [fetchPolicy](#fetchpolicy) |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | See [errorPolicy](#errorpolicy) |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n",
                  "type": {
                    "type": "Partial<SubscriptionOptions<Variables<D, V>, Data<D>>>"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "ZenObservable.Subscription"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "subscribeToMore",
              "description": "Lets you pass a GraphQL subscription and updateQuery function to subscribe to more updates for your query. The `updateQuery` parameter is a function that takes the previous query data, then an object with a `subscriptionData` property that is a `SubscriptionResult`, and returns an object with updated query data based on the new results.",
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "type": "SubscribeToMoreOptions<Data<D>, Variables<D, V>>"
                  }
                }
              ],
              "return": {
                "description": "function which unsubscribes from the subscription",
                "type": {
                  "type": "(() => void) | void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "executeQuery",
              "async": true,
              "summary": "Executes a Query once and updates the component with the result",
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "summary": "Options for the operation. All values default to their respective element instance property values.",
                  "description": "| Option | Type | Description |\n| ------ | ---- | ----------- |\n| query | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | A GraphQL document that consists of a single query to be sent down to the server. |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | A map going from variable name to variable value, where the variables are used within the GraphQL query. |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | Specifies the [`fetchPolicy`](#fetchpolicy) to be used for this query. |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | Specifies the [`ErrorPolicy`](#errorpolicy) to be used for this query. |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n",
                  "type": {
                    "type": "Partial<QueryOptions<Variables<D, V>>>"
                  }
                }
              ],
              "return": {
                "summary": "Result of the query operation",
                "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | If the query resolved, the data. |\n| error | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloError</code></pre> | If the query rejected, the error. |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | If the query returned partials results, and some were errors, the list of errors. |\n| loading | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the operation is in-flight. |\n| partial | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the query returned partial data. |\n| networkStatus | <pre class=\"language-ts\"><code class=\"language-ts\">NetworkStatus</code></pre> | See [NetworkStatus](#networkstatus). |\n",
                "type": {
                  "type": "Promise<ApolloQueryResult<Data<D>> | void>"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "fetchMore",
              "async": true,
              "summary": "Exposes the [`ObservableQuery#fetchMore`](https://www.apollographql.com/docs/react/api/core/ObservableQuery/#ObservableQuery.fetchMore) method.",
              "description": "The optional `updateQuery` parameter is a function that takes the previous query data, then an object with a `subscriptionData` property that is a `SubscriptionResult`, and returns an object with updated query data based on the new results.\n\nThe `variables` parameter is an optional new variables object.",
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "type": {
                    "type": "Partial<FetchMoreParams<D, V>>"
                  },
                  "description": "| Option | Type | Description |\n| ------ | ---- | ----------- |\n| query | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | Query to fetch, defaults to `this.query` |\n| updateQuery | <pre class=\"language-ts\"><code class=\"language-ts\">Function</code></pre>| Function to determine how to update the cache when the query resolves. (deprecated - use field policies instead) |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | Query variables |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n"
                }
              ],
              "return": {
                "summary": "Result of the query operation",
                "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | If the query resolved, the data. |\n| error | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloError</code></pre> | If the query rejected, the error. |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | If the query returned partials results, and some were errors, the list of errors. |\n| loading | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the operation is in-flight. |\n| partial | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the query returned partial data. |\n| networkStatus | <pre class=\"language-ts\"><code class=\"language-ts\">NetworkStatus</code></pre> | See [NetworkStatus](#networkstatus). |\n",
                "type": {
                  "type": "Promise<ApolloQueryResult<Data<D>>>"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "watchQuery",
              "description": "Creates an instance of ObservableQuery with the options provided by the element.\n- `context` Context to be passed to link execution chain\n- `errorPolicy` Specifies the ErrorPolicy to be used for this query\n- `fetchPolicy` Specifies the FetchPolicy to be used for this query\n- `fetchResults` Whether or not to fetch results\n- `metadata` Arbitrary metadata stored in the store with this query. Designed for debugging, developer tools, etc.\n- `notifyOnNetworkStatusChange` Whether or not updates to the network status should trigger next on the observer of this query\n- `pollInterval` The time interval (in milliseconds) on which this query should be refetched from the server.\n- `query` A GraphQL document that consists of a single query to be sent down to the server.\n- `variables` A map going from variable name to variable value, where the variables are used within the GraphQL query.\n",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "type": "Partial<WatchQueryOptions<Variables<D, V>, Data<D>>>"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "ObservableQuery<Data<D>, Variables<D, V>>"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "onData",
              "optional": true,
              "summary": "Callback for when a query is completed.",
              "parameters": [
                {
                  "name": "result",
                  "summary": "Result of the query operation",
                  "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | If the query resolved, the data. |\n| error | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloError</code></pre> | If the query rejected, the error. |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | If the query returned partials results, and some were errors, the list of errors. |\n| loading | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the operation is in-flight. |\n| partial | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Whether the query returned partial data. |\n| networkStatus | <pre class=\"language-ts\"><code class=\"language-ts\">NetworkStatus</code></pre> | See [NetworkStatus](#networkstatus). |\n",
                  "type": {
                    "type": "ApolloQueryResult<Data<D>>"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "method",
              "name": "onError",
              "optional": true,
              "summary": "Callback for when an error occurs.",
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "type": "Error"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloQuery",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-query.js"
              }
            },
            {
              "kind": "field",
              "name": "client",
              "summary": "The Apollo Client instance",
              "description": "Defaults to `window.__APOLLO_CLIENT__`, which is set by default when creating an Apollo Client. That means that in most cases, it's not necessary to explicity set the `client` property. For more information see [Getting Started: Apollo Client](https://apolloelements.dev/guides/getting-started/apollo-client/).",
              "type": {
                "type": "ApolloClient<NormalizedCacheObject> | null",
                "references": [
                  {
                    "name": "ApolloClient",
                    "start": 0,
                    "end": 12
                  },
                  {
                    "name": "NormalizedCacheObject",
                    "start": 14,
                    "end": 34
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "description": "A GraphQL document containing a single query, mutation, or subscription. You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).",
              "type": {
                "type": "DocumentNode | TypedDocumentNode | null",
                "references": [
                  {
                    "name": "DocumentNode",
                    "start": 0,
                    "end": 12
                  },
                  {
                    "name": "TypedDocumentNode",
                    "start": 16,
                    "end": 32
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Latest query data.",
              "type": {
                "type": "Data<D> | null"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "summary": "Query variables",
              "description": "An object that maps from the name of a variable as used in the operation's GraphQL document to that variable's value.\nIf the element has not yet subscribed and [`noAutoSubscribe`](#noautosubscribe) is not set, setting variables causes the element to subscribe, otherwise, setting variables causes the query to refetch.",
              "type": {
                "type": "Variables<D, V> | null"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Latest error",
              "optional": true,
              "type": {
                "type": "Error | ApolloError | null",
                "references": [
                  {
                    "name": "Error",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ApolloError",
                    "start": 9,
                    "end": 19
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "description": "Latest errors.",
              "optional": true,
              "type": {
                "type": "readonly GraphQLError[] | null",
                "references": [
                  {
                    "name": "Error",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ApolloError",
                    "start": 9,
                    "end": 19
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "Whether a request is in-flight.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "optional": true,
              "description": "Context passed to the link execution chain.",
              "type": {
                "type": "Record<string, unknown>"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "static": true,
              "name": "documentType",
              "description": "Hint that this is a query component",
              "type": {
                "type": "'query'"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "optional": true,
              "description": "Lifecycle callback that reacts to changes in the GraphQL document.",
              "parameters": [
                {
                  "name": "document",
                  "description": "The GraphQL document.",
                  "type": {
                    "type": "DocumentNode | TypedDocumentNode | null",
                    "references": [
                      {
                        "name": "DocumentNode",
                        "start": 0,
                        "end": 12
                      },
                      {
                        "name": "TypedDocumentNode",
                        "start": 16,
                        "end": 32
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "optional": true,
              "description": "Lifecycle callback that reacts to changes in the operation variables.",
              "parameters": [
                {
                  "name": "variables",
                  "description": "The variables.",
                  "type": {
                    "type": "Variables<D, V> | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-query",
          "declaration": {
            "name": "ApolloQueryElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloQueryElement",
          "declaration": {
            "name": "ApolloQueryElement"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-mutation.js",
      "declarations": [
        {
          "kind": "class",
          "tagName": "apollo-mutation",
          "name": "ApolloMutationElement",
          "summary": "Simple Mutation component that takes a button or link-wrapped button as it's trigger. When loading, it disables the button. On error, it toasts a snackbar with the error message. You can pass a `variables` object property, or if all your variables properties are strings, you can use the element's data attributes\n\n\n### Example: Using data attributes\n```html\n<apollo-mutation data-type=\"Type\" data-action=\"ACTION\">\n  <mwc-button slot=\"trigger\">OK</mwc-button>\n</apollo-mutation>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"type\": \"Type\",\n  \"action\": \"ACTION\"\n}\n```\n\n### Example: Using data attributes and variables\n```html\n<apollo-mutation data-type=\"Quote\" data-action=\"FLUB\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n  <mwc-textfield slot=\"variable\"\n      data-variable=\"name\"\n      value=\"Neil\"\n      label=\"Name\"></mwc-textfield>\n  <mwc-textarea slot=\"variable\"\n      data-variable=\"comment\"\n      value=\"That's one small step...\"\n      label=\"comment\"></mwc-textarea>\n</apollo-mutation>\n```\n\nWill mutate with the following as `variables`:\n\n```json\n{\n  \"name\": \"Neil\",\n  \"comment\": \"That's one small step...\",\n  \"type\": \"Quote\",\n  \"action\": \"FLUB\"\n}\n```\n\n### Example: Using data attributes and variables with input property\n```html\n<apollo-mutation data-type=\"Type\" data-action=\"ACTION\" input-key=\"actionInput\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n  <mwc-textfield slot=\"variable\"\n      data-variable=\"comment\"\n      value=\"Hey!\"\n      label=\"comment\"></mwc-textfield>\n</apollo-mutation>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"actionInput\": {\n    \"comment\": \"Hey!\",\n    \"type\": \"Type\",\n    \"action\": \"ACTION\"\n  }\n}\n```\n\n### Example: Using DOM properties\n```html\n<apollo-mutation id=\"mutation\">\n  <mwc-button slot=\"trigger\" label=\"OK\"></mwc-button>\n</apollo-mutation>\n<script>\n  document.getElementById('mutation').mutation = SomeMutation;\n  document.getElementById('mutation').variables = {\n    type: \"Type\",\n    action: \"ACTION\"\n  };\n</script>\n```\nWill mutate with the following as `variables`:\n```json\n{\n  \"type\": \"Type\",\n  \"action\": \"ACTION\"\n}\n```\n",
          "attributes": [
            {
              "name": "input-key",
              "type": "string",
              "fieldName": "inputKey"
            }
          ],
          "cssParts": [
            {
              "name": "variables",
              "description": "The container for variable inputs."
            },
            {
              "name": "trigger",
              "description": "The container for variable inputs."
            }
          ],
          "slots": [
            {
              "name": "trigger",
              "summary": "The triggering element. Must be a button or and anchor that wraps a button."
            },
            {
              "name": "variables",
              "summary": "An input with a `data-variable` attribute. It's `value` property gets the value for the corresponding variable."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "inputKey",
              "reflects": false,
              "description": "When set, variable data attributes will be packed into an\nobject property with the name of this property\n\n```html\n<apollo-mutation id=\"a\" data-variable=\"var\"></apollo-mutation>\n<apollo-mutation id=\"b\" input-key=\"input\" data-variable=\"var\"></apollo-mutation>\n<script>\n  console.log(a.variables) // { variable: 'var' }\n  console.log(b.variables) // { input: { variable: 'var' } }\n</script>\n```\n",
              "type": {
                "type": "string"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "privacy": "protected",
              "readonly": true,
              "summary": "Slotted trigger node.",
              "description": "Slot in a button-like element (e.g. `<button>` or `<custom-button>`). When clicked, the element will mutate. Slot in a link (`<a href>`) to make this element navigate on mutation completion.",
              "type": {
                "type": "HTMLElement | null"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "privacy": "protected",
              "readonly": true,
              "summary": "The slotted button",
              "description": "If the slotted trigger node is a button, this is the trigger. If the slotted trigger node is a link with a button as it's first child, this is the button.",
              "type": {
                "type": "ButtonLikeElement | null"
              }
            },
            {
              "kind": "field",
              "name": "inputs",
              "privacy": "protected",
              "summary": "Variable input elements.",
              "description": "An array of all the input-like elements slotted as variables (e.g. `<input/>` or `<custom-input>`). Custom inputs must have a `value` property corresponding to the input's value.",
              "readonly": true,
              "type": {
                "type": "InputLikeElement[]"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "description": "The `href` attribute of the link trigger. The element will navigate to his URL on mutation completion.",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "type": "string|undefined"
              }
            },
            {
              "kind": "method",
              "name": "resolveURL",
              "optional": true,
              "summary": "Define this function to determine the URL to navigate to after a mutation.\nFunction can be synchronous or async.\nIf this function is not defined, will navigate to the `href` property of the link trigger.\n\n#### Example: Navigate to a post's page after creating it\n```html\n<apollo-mutation id=\"mutation\">\n  <script type=\"application/graphql\">\n    mutation CreatePostMutation($title: String, $content: String) {\n      createPost(title: $title, content: $content) {\n        slug\n      }\n    }\n  </script>\n  <mwc-textfield label=\"Post title\" slot=\"variable\" data-variable=\"title\"></mwc-textfield>\n  <mwc-textarea label=\"Post Content\" slot=\"variable\" data-variable=\"content\"></mwc-textarea>\n</apollo-mutation>\n\n<script>\n  document.getElementById('mutation').resolveURL =\n    data => `/posts/${data.createPost.slug}/`;\n</script>\n```",
              "return": {
                "type": {
                  "type": "string|Promise<string>"
                },
                "description": "url to navigate to."
              },
              "parameters": [
                {
                  "name": "data",
                  "description": "mutation data",
                  "type": {
                    "type": "Data<D>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVariablesFromInputs",
              "privacy": "protected",
              "description": "Constructs a variables object from the element's data-attributes and any slotted variable inputs.",
              "return": {
                "type": {
                  "type": "Variables<D, V> | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "mutation",
              "description": "A GraphQL document containing a single mutation. You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).\n\n```html\n<script type=\"application/graphql\">\n  mutation { updateLastSeen }\n</script>\n```",
              "type": {
                "type": "DocumentNode | TypedDocumentNode"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "optimisticResponse",
              "description": "An object that represents the result of this mutation that will be optimistically stored before the server has actually returned a result.\n\nThis is most often used for optimistic UI, where we want to be able to see the result of a mutation immediately, and update the UI later if any errors appear.\n\n```ts\nelement.optimisticResponse = ({ name }: HelloMutationVariables) => ({\n  __typename: 'Mutation',\n  hello: {\n    __typename: 'Greeting',\n    name,\n  },\n});\n```\n",
              "type": {
                "type": "Data<D> | ((vars: Variables<D, V>) => Data<D>)"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "called",
              "summary": "Whether the mutation was called",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "refetchQueries",
              "description": "A list of query names which will be refetched once this mutation has returned. This is often used if you have a set of queries which may be affected by a mutation and will have to update. Rather than writing a mutation query reducer (i.e. `updateQueries`) for this, you can refetch the queries that will be affected and achieve a consistent store once these queries return.",
              "type": {
                "type": "RefetchQueriesType<D> | null"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "awaitRefetchQueries",
              "optional": true,
              "description": "Queries refetched as part of `refetchQueries` are handled asynchronously, and are not waited on before the mutation is completed (resolved). Setting this to true will make sure refetched queries are completed before the mutation is considered done. false by default.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "ignoreResults",
              "optional": true,
              "description": "If true, the returned data property will not update with the mutation result.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "errorPolicy",
              "optional": true,
              "summary": "Specifies the [Error Policy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#ErrorPolicy) to be used for this mutation.",
              "description": "Much like `fetchPolicy`, `errorPolicy` allows you to control how GraphQL Errors from the server are sent to your UI code. By default, the error policy treats any GraphQL Errors as network errors and ends the request chain. It doesn't save any data in the cache, and renders your UI with the error property set to an `ApolloError`. By changing this policy per request, you can adjust how GraphQL Errors are managed by your UI. The possible options for `errorPolicy` are:\n\n- `none`: This is the default policy to match how Apollo Client 1.0 worked. Any GraphQL Errors are treated the same as network errors and any data is ignored from the response.\n- `ignore`: Ignore allows you to read any data that is returned alongside GraphQL Errors, but doesn't save the errors or report them to your UI.\n- `all`: Using the all policy is the best way to notify your users of potential issues while still showing as much data as possible from your server. It saves both data and errors so your UI can use them.\n",
              "type": {
                "type": "ErrorPolicy"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "fetchPolicy",
              "optional": true,
              "description": "Specifies the FetchPolicy to be used for this mutation.",
              "type": {
                "type": "Extract<FetchPolicy, 'no-cache'>"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Latest mutation data.",
              "type": {
                "type": "Data<D> | null"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "variables",
              "description": "An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.",
              "type": {
                "type": "Variables<D, V> | null"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "mutate",
              "async": true,
              "description": "This resolves a single mutation according to the options specified and returns a Promise which is either resolved with the resulting data or rejected with an error.",
              "parameters": [
                {
                  "name": "params",
                  "optional": true,
                  "summary": "Optional, partial mutation params",
                  "type": {
                    "type": "Partial<MutationOptions<Data<D>, Variables<D, V>>>"
                  },
                  "description": "All named arguments to mutate default to the element's corresponding instance property. So you can call `element.mutate()` without arguments and it will call using `element.mutation`, `element.variables`, etc. You can likewise override instance properties per-call by passing them in, e.g.\n\n```ts\nawait element.mutate({\n  fetchPolicy: 'network-only'\n  variables: {\n    ...element.variables,\n    name: 'overridden',\n  },\n});\n```\n\n| Property | Type | Description |\n| -------- | ---- | ----------- |\n| awaitRefetchQueries | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | See [awaitRefetchQueries](/api/interfaces/mutation/#awaitrefetchqueries) |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | See [context](/api/interfaces/element/#context) |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | See [errorPolicy](/api/interfaces/element/#errorpolicy) |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [fetchPolicy](/api/interfaces/mutation/#fetchpolicy) |\n| mutation | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | See [mutation](/api/interfaces/mutation/#mutation) |\n| optimisticResponse | <pre class=\"language-ts\"><code class=\"language-ts\">OptimisticResponseType<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span></code></pre> | See [optimisticResponse](/api/interfaces/mutation/#optimisticresponse) |\n| refetchQueries | <pre class=\"language-ts\"><code class=\"language-ts\">RefetchQueriesType<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | See [refetchQueries](/api/interfaces/mutation/#refetchqueries) |\n| update | <pre class=\"language-ts\"><code class=\"language-ts\">MutationUpdaterFn<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;&gt;</span> </code></pre> | See [updater](/api/interfaces/mutation/#updater) |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | See [variables](/api/interfaces/mutation/#variables) |\n"
                }
              ],
              "return": {
                "summary": "A `FetchResult` object containing the result of the mutation and some metadata.",
                "type": {
                  "type": "Promise<FetchResult<Data<D>>>"
                },
                "description": "| Property | Type | Description |\n| -------- | ----------- | ---- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | The result of a successful execution of the mutation |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | included when any errors occurred as a non-empty array |\n| extensions | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Reserved for adding non-standard properties |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | See [context](/api/interfaces/element/#context) |\n"
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "method",
              "name": "updater",
              "optional": true,
              "description": "This function will be called twice over the lifecycle of a mutation. Once at the very beginning if an `optimisticResponse` was provided. The writes created from the optimistic data will be rolled back before the second time this function is called which is when the mutation has succesfully resolved. At that point update will be called with the actual mutation result and those writes will not be rolled back.\n\nNote that since this function is intended to be used to update the store, it cannot be used with a `no-cache` fetch policy. If you're interested in performing some action after a mutation has completed, and you don't need to update the store, use the Promise returned from `client.mutate` instead.\n",
              "parameters": [
                {
                  "name": "cache",
                  "description": "Use the `cache.writeQuery`, `cache.writeFragment`, etc. methods to update the cache following the mutation.",
                  "type": {
                    "type": "ApolloCache"
                  }
                },
                {
                  "name": "result",
                  "summary": "See [mutate](#mutate-returns)",
                  "type": {
                    "type": "FetchResult<Data<D>>"
                  },
                  "description": "| Property | Type | Description |\n| -------- | ----------- | ---- |\n| data | <pre class=\"language-ts\"><code class=\"language-ts\">Data<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&gt;</span></code></pre> | The result of a successful execution of the mutation |\n| errors | <pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">readonly</span> GraphQLError<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre> | included when any errors occurred as a non-empty array |\n| extensions | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | Reserved for adding non-standard properties |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | See [context](/api/interfaces/element/#context) |\n"
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "method",
              "name": "onCompleted",
              "optional": true,
              "summary": "Callback for when a mutation is completed.",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "type": "Data<D>"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "method",
              "name": "onError",
              "optional": true,
              "summary": "Callback for when an error occurs in mutation.",
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "type": "Error"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloMutation",
                "package": "@apollo-elements/lit-apollo",
                "module": "./apollo-mutation.js"
              }
            },
            {
              "kind": "field",
              "name": "client",
              "summary": "The Apollo Client instance",
              "description": "Defaults to `window.__APOLLO_CLIENT__`, which is set by default when creating an Apollo Client. That means that in most cases, it's not necessary to explicity set the `client` property. For more information see [Getting Started: Apollo Client](https://apolloelements.dev/guides/getting-started/apollo-client/).",
              "type": {
                "type": "ApolloClient<NormalizedCacheObject> | null",
                "references": [
                  {
                    "name": "ApolloClient",
                    "start": 0,
                    "end": 12
                  },
                  {
                    "name": "NormalizedCacheObject",
                    "start": 14,
                    "end": 34
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "document",
              "description": "A GraphQL document containing a single query, mutation, or subscription. You can set it as a JavaScript property or by appending a GraphQL script to the element (light DOM).",
              "type": {
                "type": "DocumentNode | TypedDocumentNode | null",
                "references": [
                  {
                    "name": "DocumentNode",
                    "start": 0,
                    "end": 12
                  },
                  {
                    "name": "TypedDocumentNode",
                    "start": 16,
                    "end": 32
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Latest error",
              "optional": true,
              "type": {
                "type": "Error | ApolloError | null",
                "references": [
                  {
                    "name": "Error",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ApolloError",
                    "start": 9,
                    "end": 19
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "errors",
              "description": "Latest errors.",
              "optional": true,
              "type": {
                "type": "readonly GraphQLError[] | null",
                "references": [
                  {
                    "name": "Error",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ApolloError",
                    "start": 9,
                    "end": 19
                  }
                ]
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "Whether a request is in-flight.",
              "type": {
                "type": "boolean"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "context",
              "optional": true,
              "description": "Context passed to the link execution chain.",
              "type": {
                "type": "Record<string, unknown>"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "field",
              "static": true,
              "name": "documentType",
              "description": "Hint that this is a mutation component",
              "type": {
                "type": "'mutation'"
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "documentChanged",
              "privacy": "protected",
              "optional": true,
              "description": "Lifecycle callback that reacts to changes in the GraphQL document.",
              "parameters": [
                {
                  "name": "document",
                  "description": "The GraphQL document.",
                  "type": {
                    "type": "DocumentNode | TypedDocumentNode | null",
                    "references": [
                      {
                        "name": "DocumentNode",
                        "start": 0,
                        "end": 12
                      },
                      {
                        "name": "TypedDocumentNode",
                        "start": 16,
                        "end": 32
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "variablesChanged",
              "privacy": "protected",
              "optional": true,
              "description": "Lifecycle callback that reacts to changes in the operation variables.",
              "parameters": [
                {
                  "name": "variables",
                  "description": "The variables.",
                  "type": {
                    "type": "Variables<D, V> | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "type": "void"
                }
              },
              "inheritedFrom": {
                "name": "ApolloElementInterface",
                "module": "./apollo-element.ts"
              }
            }
          ],
          "events": [
            {
              "name": "will-mutate",
              "description": "When the element is about to mutate. Useful for setting variables. Prevent default to prevent mutation.",
              "type": {
                "type": "CustomEvent<{ element: this }>"
              }
            },
            {
              "name": "will-navigate",
              "description": "When the mutation resolves and the element is about to navigate. cancel the event to handle navigation yourself e.g. using a client-side router.",
              "type": {
                "type": "CustomEvent<{ data: Data, element: this }>"
              }
            },
            {
              "name": "mutation-completed",
              "description": "When the mutation resolves.",
              "type": {
                "type": "CustomEvent<{ data: Data, element: this }>"
              }
            },
            {
              "name": "mutation-error",
              "description": "When the mutation rejects.",
              "type": {
                "type": "CustomEvent<{ error: ApolloError, element: this }>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-mutation",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloMutationElement",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-subscription.js",
      "declarations": [
        {
          "kind": "class",
          "tagName": "apollo-subscription",
          "name": "ApolloMutationElement",
          "summary": "Render a GraphQL subscription to the DOM\n\n## Render a subscription to Shadow DOM\n```html\n<apollo-subscription>\n <script type=\"application/graphql\">\n    subscription NewMessages {\n      messageAdded { id author content }\n    }\n  </script>\n  <template>\n    <article>\n      <span class=\"author-name\">{{ data.author.name }}</span>\n      <mark-down>{{ data.content }}</mark-down>\n    </article>\n  </template>\n</apollo-subscription>\n```\n\n## Setting subscription and variables using the DOM\n```html\n<apollo-subscription id=\"subscription-element\" template=\"message-template\"></apollo-subscription>\n\n<template id=\"message-template\">\n  <article>\n    <span class=\"author-name\">{{ data.author.name }}</span>\n    <mark-down>{{ data.content }}</mark-down>\n  </article>\n</template>\n\n<script type=\"module\">\n  import { gql } from '@apollo/client/core';\n  const el = document.getElementById('subscription-element');\n  el.subscription = gql`\n    subscription NewMessages($limit: Int) {\n      messagesAdded {\n        messages { id author content }\n        hasMore\n      }\n    }\n  `;\n  el.variables = { limit: 10 };\n</script>\n```\n"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "apollo-mutation",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        },
        {
          "kind": "js",
          "name": "ApolloMutationElement",
          "declaration": {
            "name": "ApolloMutationElement"
          }
        }
      ]
    }
  ]
}