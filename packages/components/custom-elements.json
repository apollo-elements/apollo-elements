{
  "version": "experimental",
  "tags": [
    {
      "name": "apollo-client",
      "path": "./apollo-client.js",
      "attributes": [
        {
          "name": "uri",
          "description": "When the URI attribute is set, `<apollo-client>` will asynchronously\ncreate a new ApolloClient instance with some default parameters",
          "type": "string | undefined"
        },
        {
          "name": "validate-variables",
          "description": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "client",
          "description": "Reference to the `ApolloClient` instance."
        },
        {
          "name": "elements",
          "description": "List of all ApolloElements registered to this client.",
          "type": "array"
        },
        {
          "name": "typePolicies",
          "description": "Type Policies for the client."
        },
        {
          "name": "uri",
          "attribute": "uri",
          "description": "When the URI attribute is set, `<apollo-client>` will asynchronously\ncreate a new ApolloClient instance with some default parameters",
          "type": "string | undefined"
        },
        {
          "name": "validateVariables",
          "attribute": "validate-variables",
          "description": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "client-changed"
        }
      ]
    },
    {
      "name": "apollo-client",
      "path": "./apollo-client.ts",
      "attributes": [
        {
          "name": "uri",
          "description": "When the URI attribute is set, `<apollo-client>` will asynchronously\ncreate a new ApolloClient instance with some default parameters",
          "type": "string | undefined"
        },
        {
          "name": "validate-variables",
          "description": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "observedAttributes",
          "type": "string[]",
          "default": "[\"uri\"]"
        },
        {
          "name": "client",
          "description": "Reference to the `ApolloClient` instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null"
        },
        {
          "name": "elements",
          "description": "List of all ApolloElements registered to this client.",
          "type": "readonly ApolloElementElement<unknown, Record<string, any>>[]"
        },
        {
          "name": "typePolicies",
          "description": "Type Policies for the client.",
          "type": "TypePolicies | undefined"
        },
        {
          "name": "uri",
          "attribute": "uri",
          "description": "When the URI attribute is set, `<apollo-client>` will asynchronously\ncreate a new ApolloClient instance with some default parameters",
          "type": "string | undefined"
        },
        {
          "name": "validateVariables",
          "attribute": "validate-variables",
          "description": "When true, client will not fetch operations that do not have all their non-nullable variables set.",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "client-changed"
        }
      ]
    },
    {
      "name": "apollo-mutation",
      "path": "./apollo-mutation.ts",
      "description": "Simple Mutation component that takes a button or link-wrapped button as it's trigger.\nWhen loading, it disables the button.\nOn error, it toasts a snackbar with the error message.\nYou can pass a `variables` object property,\nor if all your variables properties are strings,\nyou can use the element's data attributes",
      "attributes": [
        {
          "name": "input-key",
          "description": "When set, variable data attributes will be packed into an\nobject property with the name of this property",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "refetch-queries",
          "description": "A list of query names which will be refetched once this mutation has returned.\nThis is often used if you have a set of queries which may be affected by a mutation and will have to update.\nRather than writing a mutation query reducer (i.e. `updateQueries`) for this,\nyou can refetch the queries that will be affected\nand achieve a consistent store once these queries return.",
          "type": "RefetchQueryDescription | ((result: FetchResult<Data<D>, Record<string, any>, Record<string, any>>) => RefetchQueryDescription) | null"
        },
        {
          "name": "called",
          "description": "Whether the mutation was called",
          "type": "boolean",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult[]",
          "default": "[null]"
        },
        {
          "name": "inputKey",
          "attribute": "input-key",
          "description": "When set, variable data attributes will be packed into an\nobject property with the name of this property",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "mutation",
          "description": "The mutation.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        },
        {
          "name": "refetchQueries",
          "attribute": "refetch-queries",
          "description": "A list of query names which will be refetched once this mutation has returned.\nThis is often used if you have a set of queries which may be affected by a mutation and will have to update.\nRather than writing a mutation query reducer (i.e. `updateQueries`) for this,\nyou can refetch the queries that will be affected\nand achieve a consistent store once these queries return.",
          "type": "RefetchQueryDescription | ((result: FetchResult<Data<D>, Record<string, any>, Record<string, any>>) => RefetchQueryDescription) | null"
        },
        {
          "name": "called",
          "attribute": "called",
          "description": "Whether the mutation was called",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "optimisticResponse",
          "description": "An object that represents the result of this mutation that\nwill be optimistically stored before the server has actually returned a\nresult.\n\nThis is most often used for optimistic UI, where we want to be able to see\nthe result of a mutation immediately, and update the UI later if any errors\nappear.",
          "type": "Data<D> | ((vars: Variables<D, V>) => Data<D>) | undefined"
        },
        {
          "name": "errorPolicy",
          "description": "Specifies the ErrorPolicy to be used for this mutation.",
          "type": "\"none\" | \"ignore\" | \"all\" | undefined"
        },
        {
          "name": "fetchPolicy",
          "description": "Specifies the FetchPolicy to be used for this mutation.",
          "type": "\"no-cache\" | undefined"
        },
        {
          "name": "awaitRefetchQueries",
          "description": "Queries refetched as part of refetchQueries are handled asynchronously,\nand are not waited on before the mutation is completed (resolved).\nSetting this to true will make sure refetched queries are completed\nbefore the mutation is considered done. false by default.",
          "type": "boolean | undefined"
        },
        {
          "name": "ignoreResults",
          "description": "If true, the returned data property will not update with the mutation result.",
          "type": "boolean | undefined",
          "default": "false"
        },
        {
          "name": "documentType",
          "type": "\"document\" | \"query\" | \"mutation\" | \"subscription\"",
          "default": "\"mutation\""
        },
        {
          "name": "client",
          "description": "The Apollo Client instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null",
          "default": "\"window.__APOLLO_CLIENT__ ?? null\""
        },
        {
          "name": "data",
          "description": "Latest mutation data",
          "type": "Data<D> | null"
        },
        {
          "name": "variables",
          "description": "An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.",
          "type": "Variables<D, V> | null",
          "default": "\"\""
        },
        {
          "name": "error",
          "description": "Latest error",
          "type": "Error | ApolloError | null"
        },
        {
          "name": "errors",
          "description": "Latest errors",
          "type": "readonly GraphQLError[] | null"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean",
          "default": "\"\""
        },
        {
          "name": "context",
          "description": "Context passed to the link execution chain.",
          "type": "Record<string, unknown> | undefined"
        },
        {
          "name": "document",
          "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.\nIf unset, the element can derive the document from the first\nlight-DOM `<script type=\"application/graphql\">` child.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        }
      ],
      "events": [
        {
          "name": "will-mutate",
          "description": "When the element is about to mutate. Useful for setting variables. Prevent default to prevent mutation. Detail is `{ element: this }`"
        },
        {
          "name": "will-navigate",
          "description": "When the mutation resolves and the element is about to navigate. cancel the event to handle navigation yourself e.g. using a client-side router. . `detail` is `{ data: Data, element: this }`"
        },
        {
          "name": "mutation-completed",
          "description": "When the mutation resolves. `detail` is `{ data: Data, element: this }`"
        },
        {
          "name": "mutation-error",
          "description": "When the mutation is rejected. `detail` is `{ error: ApolloError, element: this }`"
        },
        {
          "name": "apollo-element-disconnected",
          "description": "when the element disconnects from the dom"
        },
        {
          "name": "apollo-element-connected",
          "description": "when the element connects to the dom"
        },
        {
          "name": "apollo-mutation-result",
          "description": "when the mutation resolves"
        },
        {
          "name": "apollo-error",
          "description": "when the mutation rejects"
        }
      ],
      "slots": [
        {
          "name": "trigger",
          "description": "The triggering element. Must be a button or and anchor that wraps a button."
        },
        {
          "name": "variable",
          "description": "An input with a `data-variable` attribute. It's `value` property gets the value for the corresponding variable."
        }
      ],
      "cssParts": [
        {
          "name": "variables",
          "description": "The container for variable inputs."
        },
        {
          "name": "trigger",
          "description": "The container for the trigger.\nSee [[`ApolloMutationInterface`]] for more information on events"
        }
      ]
    }
  ]
}