{
  "version": "experimental",
  "tags": [
    {
      "name": "",
      "path": "./apollo-element.ts",
      "description": "`ApolloElement`\n\nüöÄ Custom element base class for apollo gluon elements.\n\nSee [[`ApolloElementInterface`]] for more information on events",
      "properties": [
        {
          "name": "documentType",
          "type": "\"query\" | \"mutation\" | \"subscription\"",
          "default": "\"document\""
        },
        {
          "name": "data",
          "description": "data",
          "type": "Data<D> | null"
        },
        {
          "name": "variables",
          "description": "Operation variables",
          "type": "Variables<D, V> | null"
        },
        {
          "name": "error",
          "description": "Latest error",
          "type": "Error | ApolloError | null"
        },
        {
          "name": "errors",
          "description": "Latest errors",
          "type": "readonly GraphQLError[] | null"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        },
        {
          "name": "context",
          "description": "Context to be passed to link execution chain.",
          "type": "Record<string, unknown> | undefined"
        },
        {
          "name": "client",
          "description": "The Apollo Client instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null",
          "default": "\"window.__APOLLO_CLIENT__ ?? null\""
        },
        {
          "name": "document",
          "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.\nIf unset, the element can derive the document from the first\nlight-DOM `<script type=\"application/graphql\">` child.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        }
      ],
      "events": [
        {
          "name": "apollo-element-connected",
          "description": "when the element connects to the dom"
        },
        {
          "name": "apollo-element-disconnected",
          "description": "when the element disconnects from the dom"
        }
      ]
    },
    {
      "name": "",
      "path": "./apollo-mutation.ts",
      "description": "`ApolloMutation`\n\nüë©‚ÄçüöÄ Custom element base class to issue mutations via your Apollo cache.\n\nSee [[`ApolloMutationInterface`]] for more information on events",
      "properties": [
        {
          "name": "mutation",
          "description": "The mutation.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        },
        {
          "name": "refetchQueries",
          "description": "Specifies the FetchPolicy to be used for this mutation.",
          "type": "RefetchQueryDescription | ((result: FetchResult<Data<D>, Record<string, any>, Record<string, any>>) => RefetchQueryDescription) | null"
        },
        {
          "name": "called",
          "description": "Whether the mutation has been fired",
          "type": "boolean"
        },
        {
          "name": "optimisticResponse",
          "description": "An object that represents the result of this mutation that\nwill be optimistically stored before the server has actually returned a\nresult.\n\nThis is most often used for optimistic UI, where we want to be able to see\nthe result of a mutation immediately, and update the UI later if any errors\nappear.",
          "type": "Data<D> | ((vars: Variables<D, V>) => Data<D>) | undefined"
        },
        {
          "name": "errorPolicy",
          "description": "Specifies the ErrorPolicy to be used for this mutation.",
          "type": "\"none\" | \"ignore\" | \"all\" | undefined"
        },
        {
          "name": "fetchPolicy",
          "description": "Specifies the FetchPolicy to be used for this mutation.",
          "type": "\"no-cache\" | undefined"
        },
        {
          "name": "awaitRefetchQueries",
          "description": "Queries refetched as part of refetchQueries are handled asynchronously,\nand are not waited on before the mutation is completed (resolved).\nSetting this to true will make sure refetched queries are completed\nbefore the mutation is considered done. false by default.",
          "type": "boolean | undefined"
        },
        {
          "name": "ignoreResults",
          "description": "If true, the returned data property will not update with the mutation result.",
          "type": "boolean | undefined",
          "default": "false"
        },
        {
          "name": "documentType",
          "type": "\"query\" | \"mutation\" | \"subscription\"",
          "default": "\"mutation\""
        },
        {
          "name": "data",
          "description": "Latest mutation",
          "type": "Data<D> | null"
        },
        {
          "name": "variables",
          "description": "An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.",
          "type": "Variables<D, V> | null",
          "default": "\"\""
        },
        {
          "name": "error",
          "description": "Latest error",
          "type": "Error | ApolloError | null"
        },
        {
          "name": "errors",
          "description": "Latest errors",
          "type": "readonly GraphQLError[] | null"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean",
          "default": "\"\""
        },
        {
          "name": "context",
          "description": "Context to be passed to link execution chain.",
          "type": "Record<string, unknown> | undefined"
        },
        {
          "name": "client",
          "description": "The Apollo Client instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null",
          "default": "\"window.__APOLLO_CLIENT__ ?? null\""
        },
        {
          "name": "document",
          "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.\nIf unset, the element can derive the document from the first\nlight-DOM `<script type=\"application/graphql\">` child.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        }
      ],
      "events": [
        {
          "name": "apollo-mutation-result",
          "description": "when the mutation resolves"
        },
        {
          "name": "apollo-error",
          "description": "when the mutation rejects"
        },
        {
          "name": "apollo-element-connected",
          "description": "when the element connects to the dom"
        },
        {
          "name": "apollo-element-disconnected",
          "description": "when the element disconnects from the dom"
        }
      ]
    },
    {
      "name": "",
      "path": "./apollo-query.ts",
      "description": "üöÄ `ApolloQuery`\n\nCustom element base class that connects to your Apollo cache.\n\nSee [[`ApolloQueryInterface`]] for more information on events",
      "properties": [
        {
          "name": "query",
          "description": "A GraphQL document containing a single query.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        },
        {
          "name": "fetchPolicy",
          "description": "Specifies the FetchPolicy to be used for this query.",
          "type": "\"cache-first\" | \"network-only\" | \"cache-only\" | \"no-cache\" | \"standby\" | undefined"
        },
        {
          "name": "partial",
          "description": "If data was read from the cache with missing fields,\npartial will be true. Otherwise, partial will be falsy",
          "type": "boolean | undefined"
        },
        {
          "name": "partialRefetch",
          "description": "If true, perform a query refetch if the query result is marked as being partial,\nand the returned data is reset to an empty Object by the Apollo Client QueryManager\n(due to a cache miss).\n\nThe default value is false for backwards-compatibility's sake,\nbut should be changed to true for most use-cases.",
          "type": "boolean | undefined"
        },
        {
          "name": "refetchQueries",
          "type": "RefetchQueryDescription | ((result: FetchResult<Data<D>, Record<string, any>, Record<string, any>>) => RefetchQueryDescription) | null"
        },
        {
          "name": "returnPartialData",
          "description": "Opt into receiving partial results from the cache for queries\nthat are not fully satisfied by the cache.",
          "type": "boolean | undefined"
        },
        {
          "name": "nextFetchPolicy",
          "description": "When someone chooses cache-and-network or network-only as their\ninitial FetchPolicy, they often do not want future cache updates to\ntrigger unconditional network requests, which is what repeatedly\napplying the cache-and-network or network-only policies would seem\nto imply. Instead, when the cache reports an update after the\ninitial network request, it may be desirable for subsequent network\nrequests to be triggered only if the cache result is incomplete.\nThe nextFetchPolicy option provides a way to update\noptions.fetchPolicy after the intial network request, without\nhaving to set options.",
          "type": "\"cache-first\" | \"network-only\" | \"cache-only\" | \"no-cache\" | \"standby\" | undefined"
        },
        {
          "name": "networkStatus",
          "description": "`networkStatus` is useful if you want to display a different loading indicator (or no indicator at all)\ndepending on your network status as it provides a more detailed view into the state of a network request\non your component than `loading` does. `networkStatus` is an enum with different number values between 1 and 8.\nThese number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query‚Äôs variables change and a network request was fired then the network status will be setVariables until the result of that query comes back. React users will see this when options.variables changes on their queries.\n3. `fetchMore`: Indicates that fetchMore was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that refetch was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to poll every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to `loading` being true. In fact you could\nreplace all of your `loading` checks with `networkStatus < 7` and you would not see a difference.\nIt is recommended that you use `loading`, however.",
          "type": "NetworkStatus"
        },
        {
          "name": "observableQuery",
          "description": "The Apollo ObservableQuery watching this element's query.",
          "type": "ObservableQuery<Data<D>, Variables<D, V>> | undefined"
        },
        {
          "name": "options",
          "description": "Exposes the [`ObservableQuery#setOptions`](https://www.apollographql.com/docs/react/api/apollo-client.html#ObservableQuery.setOptions) method.",
          "type": "Partial<WatchQueryOptions<Variables<D, V>, Data<D>>> | null"
        },
        {
          "name": "noAutoSubscribe",
          "description": "When true, the component will not automatically subscribe to new data.\nCall the `subscribe()` method to do so.",
          "type": "boolean"
        },
        {
          "name": "notifyOnNetworkStatusChange",
          "description": "Whether or not updates to the network status should trigger next on the observer of this query.",
          "type": "boolean | undefined"
        },
        {
          "name": "pollInterval",
          "description": "The time interval (in milliseconds) on which this query should be refetched from the server.",
          "type": "number | undefined"
        },
        {
          "name": "errorPolicy",
          "description": "Specifies the ErrorPolicy to be used for this query.",
          "type": "ErrorPolicy",
          "default": "\"none\""
        },
        {
          "name": "documentType",
          "type": "\"query\" | \"mutation\" | \"subscription\"",
          "default": "\"query\""
        },
        {
          "name": "data",
          "description": "Latest query data.",
          "type": "Data<D> | null"
        },
        {
          "name": "variables",
          "description": "An object map from variable name to variable value, where the variables are used within the GraphQL query.",
          "type": "Variables<D, V> | null"
        },
        {
          "name": "error",
          "description": "Latest error",
          "type": "Error | ApolloError | null"
        },
        {
          "name": "errors",
          "description": "Latest errors",
          "type": "readonly GraphQLError[] | null"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        },
        {
          "name": "context",
          "description": "Context to be passed to link execution chain.",
          "type": "Record<string, unknown> | undefined"
        },
        {
          "name": "client",
          "description": "The Apollo Client instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null",
          "default": "\"window.__APOLLO_CLIENT__ ?? null\""
        },
        {
          "name": "document",
          "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.\nIf unset, the element can derive the document from the first\nlight-DOM `<script type=\"application/graphql\">` child.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        }
      ],
      "events": [
        {
          "name": "apollo-query-result",
          "description": "when the query resolves"
        },
        {
          "name": "apollo-error",
          "description": "when the query rejects"
        },
        {
          "name": "apollo-element-connected",
          "description": "when the element connects to the dom"
        },
        {
          "name": "apollo-element-disconnected",
          "description": "when the element disconnects from the dom"
        }
      ]
    },
    {
      "name": "",
      "path": "./apollo-subscription.ts",
      "description": "`ApolloSubscription`\n\nüöÄ Custom element base class that updates with an Apollo GraphQL subscription.",
      "properties": [
        {
          "name": "subscription",
          "description": "A GraphQL document containing a single subscription.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        },
        {
          "name": "fetchPolicy",
          "description": "Specifies the FetchPolicy to be used for this subscription.",
          "type": "\"cache-first\" | \"network-only\" | \"cache-only\" | \"no-cache\" | \"standby\" | undefined"
        },
        {
          "name": "pollInterval",
          "description": "The time interval (in milliseconds) on which this subscription should be refetched from the server.",
          "type": "number | undefined"
        },
        {
          "name": "noAutoSubscribe",
          "description": "If true, the element will not begin querying data until you manually call `subscribe`",
          "type": "boolean"
        },
        {
          "name": "observable",
          "description": "Observable watching this element's subscription.",
          "type": "Observable<FetchResult<Data<D>, Record<string, any>, Record<string, any>>> | undefined"
        },
        {
          "name": "observableSubscription",
          "description": "Subscription to the observable",
          "type": "Subscription | undefined"
        },
        {
          "name": "notifyOnNetworkStatusChange",
          "description": "Whether or not updates to the network status should trigger next on the observer of this subscription.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "shouldResubscribe",
          "type": "boolean | ((options: SubscriptionDataOptions<unknown, Record<string, any>>) => boolean) | undefined",
          "default": "false"
        },
        {
          "name": "skip",
          "description": "If skip is true, the query will be skipped entirely",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "documentType",
          "type": "\"query\" | \"mutation\" | \"subscription\"",
          "default": "\"subscription\""
        },
        {
          "name": "data",
          "description": "data",
          "type": "Data<D> | null"
        },
        {
          "name": "variables",
          "description": "An object map from variable name to variable value, where the variables are used within the GraphQL subscription.",
          "type": "Variables<D, V> | null"
        },
        {
          "name": "error",
          "description": "Latest error",
          "type": "Error | ApolloError | null"
        },
        {
          "name": "errors",
          "description": "Latest errors",
          "type": "readonly GraphQLError[] | null"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        },
        {
          "name": "context",
          "description": "Context to be passed to link execution chain.",
          "type": "Record<string, unknown> | undefined"
        },
        {
          "name": "client",
          "description": "The Apollo Client instance.",
          "type": "ApolloClient<NormalizedCacheObject> | null",
          "default": "\"window.__APOLLO_CLIENT__ ?? null\""
        },
        {
          "name": "document",
          "description": "GraphQL operation document i.e. query, subscription, or mutation.\nMust be a parsed GraphQL DocumentNode, so use `graphql-tag`.\nIf unset, the element can derive the document from the first\nlight-DOM `<script type=\"application/graphql\">` child.",
          "type": "DocumentNode | ComponentDocument<D> | null"
        }
      ],
      "events": [
        {
          "name": "apollo-subscription-result",
          "description": "when the subscription updates"
        },
        {
          "name": "apollo-error",
          "description": "when the query rejects"
        },
        {
          "name": "apollo-element-connected",
          "description": "when the element connects to the dom"
        },
        {
          "name": "apollo-element-disconnected",
          "description": "when the element disconnects from the dom"
        }
      ]
    }
  ]
}