import type { DocumentNode } from 'graphql';
import type { ApolloElementInterface } from './apollo-element';
import type {
  MutationOptions,
  MutationUpdaterFn,
  FetchResult,
  ErrorPolicy,
  FetchPolicy,
} from '@apollo/client/core';
import type { RefetchQueryDescription } from '@apollo/client/core/watchQueryOptions';

export declare class ApolloMutationInterface<TData, TVariables>
  extends ApolloElementInterface<TData> {
  /**
   * Latest mutation data.
   */
  data: TData;

  /**
   * An object that maps from the name of a variable as used in the mutation GraphQL document to that variable's value.
   */
  variables: TVariables;

  /** The mutation. */
  mutation: DocumentNode;

  /**
   * An object that represents the result of this mutation that
   * will be optimistically stored before the server has actually returned a
   * result.
   *
   * This is most often used for optimistic UI, where we want to be able to see
   * the result of a mutation immediately, and update the UI later if any errors
   * appear.
   */
  optimisticResponse?: TData | ((vars: TVariables) => TData);

  /**
   * Whether the mutation has been fired
   */
  called: boolean;

  /**
   * If true, the returned data property will not update with the mutation result.
   */
  ignoreResults: boolean;

  /**
   * The ID number of the most recent mutation since the element was instantiated.
   * @private
   */
  mostRecentMutationId: number;

  /**
   * Specifies the ErrorPolicy to be used for this mutation.
   */
  errorPolicy?: ErrorPolicy;

  /**
   * Specifies the FetchPolicy to be used for this mutation.
   */
  fetchPolicy?: Extract<FetchPolicy, 'no-cache'>;

  /**
   * Specifies the FetchPolicy to be used for this mutation.
   */
  refetchQueries?:
    RefetchQueryDescription | ((result: FetchResult<TData>) => RefetchQueryDescription);


  /**
   * Queries refetched as part of refetchQueries are handled asynchronously,
   * and are not waited on before the mutation is completed (resolved).
   * Setting this to true will make sure refetched queries are completed
   * before the mutation is considered done. false by default.
   */
  awaitRefetchQueries?: boolean;

  /**
   * Callback for when a mutation is completed.
   */
  onCompleted?(_data: FetchResult<TData>): void

  /**
   * Callback for when an error occurs in mutation.
   */
  onError?(_error: Error): void

  /**
   * A function which updates the apollo cache when the query responds.
   * This function will be called twice over the lifecycle of a mutation.
   * Once at the very beginning if an optimisticResponse was provided.
   * The writes created from the optimistic data will be rolled back before
   * the second time this function is called which is when the mutation has
   * succesfully resolved. At that point update will be called with the actual
   * mutation result and those writes will not be rolled back.
   *
   * The reason a DataProxy is provided instead of the user calling the methods
   * directly on ApolloClient is that all of the writes are batched together at
   * the end of the update, and it allows for writes generated by optimistic
   * data to be rolled back.
   */
  updater?(...params: Parameters<MutationUpdaterFn<TData>>):
    ReturnType<MutationUpdaterFn<TData>>;

  public mutate(
    params?: Partial<MutationOptions<TData, TVariables>>
  ): Promise<FetchResult<TData>>;
}
