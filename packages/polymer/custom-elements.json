{
  "version": "experimental",
  "tags": [
    {
      "name": "apollo-mutation",
      "path": "./apollo-mutation.ts",
      "description": "`<apollo-mutation>` fires Polymer-style prop-changed events\nwhen its `called`, `data`, `error`, `loading` or `networkStatus`\nproperties change.\n\n## üë©‚ÄçüöÄ Usage\n\n```js\nclass MutationElement extends PolymerElement {\n   static template = html`\n     <apollo-mutation id=\"userMutation\" data=\"{{data}}\">\n       <script type=\"application/graphql\">\n         mutation User($id: ID!, $name: String, $picture: String) {\n           user(id: $id, name: $name, picture: $picture) {\n             name\n             picture\n           }\n         }\n       </script>\n     </apollo-mutation>\n\n     <paper-input label=\"Name\" value=\"{{name}}\"></paper-input>\n     <paper-input label=\"Picture URL\" value=\"{{picture}}\"></paper-input>\n     <paper-button on-click=\"mutate\">Submit</paper-button>\n   `;\n\n   static properties = {\n     variables: {\n       type: Object,\n       computed: 'computeVariables(name, picture)',\n     },\n   };\n\n   computeVariables(name, picture) {\n     return { name, picture }\n   }\n\n   mutate() {\n     const { variables } = this;\n     return this.$.userMutation.mutate({ variables })\n   }\n}\n```",
      "properties": [
        {
          "name": "called",
          "description": "Whether the mutation has been called",
          "type": "boolean"
        },
        {
          "name": "data",
          "description": "Latest data.",
          "type": "TData"
        },
        {
          "name": "error",
          "description": "Latest error.",
          "type": "Error"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "apollo-query",
      "path": "./apollo-query.ts",
      "description": "`<apollo-query>` fires Polymer-style prop-changed events\nwhen its `data`, `error`, `loading` or `networkStatus`\nproperties change.\n\n## üë©‚ÄçüöÄ Usage\n```js\nclass QueryElement extends PolymerElement {\n   static template = html`\n     <apollo-query data=\"{{data}}\" variables=\"[[variables]]\">\n       <script type=\"application/graphql\">\n         query User($id: ID!) {\n           user(id: $id) {\n             name\n             picture\n           }\n         }\n       </script>\n     </apollo-query>\n\n     <paper-icon-item>\n       <iron-image slot=\"item-icon\">[[data.user.picture]]</iron-image>\n       [[data.user.name]]\n     </paper-icon-item>\n   `;\n}\n```",
      "properties": [
        {
          "name": "networkStatus",
          "description": "Enum of network statuses. See https://bit.ly/2sfKLY0",
          "type": "NetworkStatus"
        },
        {
          "name": "data",
          "description": "Latest data.",
          "type": "TData"
        },
        {
          "name": "error",
          "description": "Latest error.",
          "type": "Error"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "apollo-subscription",
      "path": "./apollo-subscription.ts",
      "description": "`<apollo-subscription>` fires Polymer-style prop-changed events\nwhen its `data`, `error`, or `loading` properties change.\n\n## üë©‚ÄçüöÄ Usage\n```js\nclass QueryElement extends PolymerElement {\n   static template = html`\n     <apollo-subscription data=\"{{data}}\" variables=\"[[variables]]\" on-data-changed=\"toast\">\n       <script type=\"application/graphql\">\n         subscription UserJoined($id: ID!) {\n           userJoined(id: $id) {\n             name\n             picture\n           }\n         }\n       </script>\n     </apollo-subscription>\n\n     <paper-toast duration=\"5000\" text=\"A wild [[data.userJoined.name]] approaches!\">\n       <iron-image>[[data.userJoined.picture]]</iron-image>\n     </paper-toast>\n   `;\n}\n```",
      "properties": [
        {
          "name": "data",
          "description": "Latest data.",
          "type": "TData"
        },
        {
          "name": "error",
          "description": "Latest error.",
          "type": "Error"
        },
        {
          "name": "loading",
          "description": "Whether a request is in flight.",
          "type": "boolean"
        }
      ]
    }
  ]
}