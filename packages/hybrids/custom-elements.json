{
  "schemaVersion": "0.1.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "controller",
          "declaration": {
            "name": "controller",
            "module": "./factories/controller.js"
          }
        },
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "./factories/query.js"
          }
        },
        {
          "kind": "js",
          "name": "mutation",
          "declaration": {
            "name": "mutation",
            "module": "./factories/mutation.js"
          }
        },
        {
          "kind": "js",
          "name": "subscription",
          "declaration": {
            "name": "subscription",
            "module": "./factories/subscription.js"
          }
        },
        {
          "kind": "js",
          "name": "define",
          "declaration": {
            "name": "define",
            "package": "hybrids"
          }
        },
        {
          "kind": "js",
          "name": "html",
          "declaration": {
            "name": "html",
            "package": "hybrids"
          }
        },
        {
          "kind": "js",
          "name": "Hybrids",
          "declaration": {
            "name": "Hybrids",
            "package": "hybrids"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "factories/controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HybridsControllerHost",
          "members": [
            {
              "kind": "field",
              "name": "#controllers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#keys",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "register",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string|number|symbol"
                  }
                },
                {
                  "name": "record",
                  "type": {
                    "text": "ControllerRecord"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeController",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "controller",
                  "type": {
                    "text": "ReactiveController"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dispatchEvent",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<Element['dispatchEvent']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<Element['addEventListener']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<Element['removeEventListener']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "requestUpdate",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "async": true
            },
            {
              "kind": "field",
              "name": "updateComplete",
              "type": {
                "text": "Promise<boolean>"
              }
            }
          ],
          "superclass": {
            "name": "EventTarget"
          }
        },
        {
          "kind": "function",
          "name": "controller",
          "return": {
            "type": {
              "text": "Descriptor<E, C>"
            }
          },
          "parameters": [
            {
              "name": "Controller",
              "type": {
                "text": "Constructor<C>"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HybridsControllerHost",
          "declaration": {
            "name": "HybridsControllerHost",
            "module": "factories/controller.js"
          }
        },
        {
          "kind": "js",
          "name": "controller",
          "declaration": {
            "name": "controller",
            "module": "factories/controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "factories/mutation.js",
      "declarations": [
        {
          "kind": "function",
          "name": "mutation",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "mutationDocument",
              "optional": true,
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "description": "The mutation document."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "ApolloMutationControllerOptions<D, V>"
              },
              "description": "Options to control the mutation."
            }
          ],
          "description": "Hybrids property descriptor factory for GraphQL mutations."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "mutation",
          "declaration": {
            "name": "mutation",
            "module": "factories/mutation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "factories/query.js",
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "queryDocument",
              "optional": true,
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "description": "The query document."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "ApolloQueryControllerOptions<D, V>"
              },
              "description": "Options to control the query.\n\nAll properties are optional\n\n| Property | Type | Description |\n| -------- | ---- | ----------- |\n| fetchPolicy | `WatchQueryFetchPolicy`{lang=ts} | The [fetchPolicy](https://www.apollographql.com/docs/react/api/core/ApolloClient/#FetchPolicy) for the query. |\n| variables | `Variables<D, V>`{lang=ts} | Variables for the query. |\n| noAutoSubscribe | `boolean`{lang=ts} | If true, the element will not begin querying data until you manually call `subscribe` |\n| shouldSubscribe | `(op?: Partial<Operation<D, V>) => boolean`{lang=ts} | If true, the element will not begin querying data until you manually call `subscribe` | Determines whether the element should attempt to subscribe automatically\\nOverride to prevent subscribing unless your conditions are met |\n| onData | `(data: Data<D>) => void`{lang=ts} | Optional callback for when a query resolves. |\n| onError | `(error: Error) => void`{lang=ts} | Optional callback for when an error occurs. |\n"
            }
          ],
          "description": "Hybrids property descriptor factory for GraphQL querys."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "query",
          "declaration": {
            "name": "query",
            "module": "factories/query.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "factories/subscription.js",
      "declarations": [
        {
          "kind": "function",
          "name": "subscription",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "subscriptionDocument",
              "optional": true,
              "type": {
                "text": "ComponentDocument<D> | null"
              },
              "description": "The subscription document."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "ApolloSubscriptionControllerOptions<D, V>"
              },
              "description": "Options to control the subscription."
            }
          ],
          "description": "Hybrids property descriptor factory for GraphQL subscriptions."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "subscription",
          "declaration": {
            "name": "subscription",
            "module": "factories/subscription.js"
          }
        }
      ]
    }
  ]
}
