{
  "schemaVersion": "1",
  "$schema": "https://raw.githubusercontent.com/webcomponents/custom-elements-manifest/master/schema.json",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "./index.js",
      "exports": [
        {
          "name": "ApolloQuery",
          "kind": "js",
          "declaration": {
            "name": "ApolloQuery",
            "module": "./apollo-query.js"
          }
        },
        {
          "name": "ApolloMutation",
          "kind": "js",
          "declaration": {
            "name": "ApolloMutation",
            "module": "./apollo-mutation.js"
          }
        },
        {
          "name": "ApolloSubscription",
          "kind": "js",
          "declaration": {
            "name": "ApolloSubscription",
            "module": "./apollo-subscription.js"
          }
        },
        {
          "name": "client",
          "kind": "js",
          "declaration": {
            "name": "client",
            "module": "./factories/client.js"
          }
        },
        {
          "name": "query",
          "kind": "js",
          "declaration": {
            "name": "query",
            "module": "./factories/query.js"
          }
        },
        {
          "name": "mutation",
          "kind": "js",
          "declaration": {
            "name": "mutation",
            "module": "./factories/mutation.js"
          }
        },
        {
          "name": "subscription",
          "kind": "js",
          "declaration": {
            "name": "subscription",
            "module": "./factories/subscription.js"
          }
        }
      ],
      "declarations": []
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-query.js",
      "exports": [
        {
          "name": "ApolloQuery",
          "kind": "js",
          "declaration": {
            "name": "ApolloQuery"
          }
        }
      ],
      "declarations": [
        {
          "kind": "variable",
          "name": "ApolloQuery",
          "description": "Hybrids descriptor bag.\n\nSpread into your hybrids to implement the [ApolloQueryElement](/api/interfaces/query/) interface.",
          "type": {
            "type": "Hybrids<ApolloQueryElement>"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-mutation.js",
      "exports": [
        {
          "name": "ApolloMutation",
          "kind": "js",
          "declaration": {
            "name": "ApolloMutation"
          }
        }
      ],
      "declarations": [
        {
          "kind": "variable",
          "name": "ApolloMutation",
          "description": "Hybrids descriptor bag.\n\nSpread into your hybrids to implement the [ApolloMutationElement](/api/interfaces/mutation/) interface.",
          "type": {
            "type": "Hybrids<ApolloMutationElement>"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./apollo-subscription.js",
      "exports": [
        {
          "name": "ApolloSubscription",
          "kind": "js",
          "declaration": {
            "name": "ApolloSubscription"
          }
        }
      ],
      "declarations": [
        {
          "kind": "variable",
          "name": "ApolloSubscription",
          "description": "Hybrids descriptor bag.\n\nSpread into your hybrids to implement the [ApolloSubscriptionElement](/api/interfaces/subscription/) interface.",
          "type": {
            "type": "Hybrids<ApolloSubscriptionElement>"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./factories/client.js",
      "exports": [
        {
          "name": "client",
          "kind": "js",
          "declaration": {
            "name": "client"
          }
        }
      ],
      "declarations": [
        {
          "kind": "function",
          "name": "client",
          "summary": "Hybrids descriptor factory for an [ApolloElement](/api/interfaces/element/)",
          "parameters": [
            {
              "name": "client",
              "optional": true,
              "default": "window.__APOLLO_CLIENT__",
              "summary": "client instance.",
              "type": {
                "type": "ApolloClient<NormalizedCacheObject> | null"
              }
            },
            {
              "name": "options",
              "optional": true,
              "default": "{ useGlobal: true }",
              "summary": "Options to configure the factory.",
              "type": {
                "type": "ClientHybridsFactoryOptions"
              },
              "description": "| Property | Type | Description |\n| -------- | ---- | ----------- |\n| useGlobal | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | if false, do not use <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">__APOLLO_CLIENT__</span> by default |\n"
            }
          ],
          "return": {
            "summary": "Hybrids descriptor which mixes the [ApolloElementInterface](/api/interfaces/element/) in on connect",
            "type": {
              "type": "Descriptor<ApolloElementElement<D, V>>"
            }
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./factories/query.js",
      "exports": [
        {
          "name": "query",
          "kind": "js",
          "declaration": {
            "name": "query"
          }
        }
      ],
      "declarations": [
        {
          "kind": "function",
          "name": "query",
          "description": "Hybrids property descriptor factory for GraphQL queries.\nSetting one will automatically trigger the query, unless `noAutoSubscribe` is set.\nImplements the [ApolloQueryElement](/api/interfaces/query/) interface.",
          "parameters": [
            {
              "name": "document",
              "optional": true,
              "summary": "The query to subscribe to.",
              "type": {
                "type": "DocumentNode | TypedDocumentNode"
              }
            },
            {
              "name": "options",
              "optional": true,
              "summary": "Options to configure the query.",
              "type": {
                "type": "QueryHybridsFactoryOptions<D, V>"
              },
              "description": "| Option | Type | Description |\n| ------ | ---- | ----------- |\n| query | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | A GraphQL document that consists of a single query to be sent down to the server. |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | A map going from variable name to variable value, where the variables are used within the GraphQL query. |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | Error policy to use for the query. See [errorPolicy](/api/interfaces/query#errorpolicy) |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [fetchPolicy](/api/interfaces/query#fetchpolicy) |\n| nextFetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [nextFetchPolicy](/api/interfaces/query#nextfetchpolicy) |\n| client | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloClient</code></pre> | ApolloClient instance use to make the call. |\n| pollInterval | <pre class=\"language-ts\"><code class=\"language-ts\">number</code></pre> | See [pollInterval](/api/interfaces/query#pollinterval) |\n| noAutoSubscribe | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | See [noAutoSubscribe](/api/interfaces/query#noautosubscribe) |\n| notifyOnNetworkStatusChange | See [notifyOnNetworkStatusChange](/api/interfaces/query#notifyonnetworkstatuschange) |\n| partialRefetch | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | See [partialRefetch](/api/interfaces/query#partialrefetch) |\n| returnPartialData | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | See [returnPartialData](/api/interfaces/query#returnpartialdata) |\n| shouldSubscribe | See [shouldSubscribe](/api/interfaces/query#shouldsubscribe) | Predicate which determines whether to automatically subscribe |\n| onError | Callback for when an error occurs. See [onError](/api/interfaces/query#onerror). |\n| onData | Callback for when the query resolves. See [onData](/api/interfaces/query#ondata). |\n"
            }
          ],
          "return": {
            "summary": "Hybrids descriptor which mixes the [ApolloQueryInterface](/api/interfaces/query/) in on connect.",
            "type": {
              "type": "Descriptor<ApolloQueryElement<D, V>>"
            }
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./factories/mutation.js",
      "exports": [
        {
          "name": "mutation",
          "kind": "js",
          "declaration": {
            "name": "mutation"
          }
        }
      ],
      "declarations": [
        {
          "kind": "function",
          "name": "mutation",
          "description": "Hybrids property descriptor factory for GraphQL Mutations.\nImplements the [ApolloMutationElement](/api/interfaces/mutation/) interface.",
          "parameters": [
            {
              "name": "document",
              "optional": true,
              "summary": "The mutation document.",
              "type": {
                "type": "DocumentNode | TypedDocumentNode"
              }
            },
            {
              "name": "options",
              "optional": true,
              "summary": "Options to configure the mutation.",
              "type": {
                "type": "MutationHybridsFactoryOptions<D, V>"
              },
              "description": "| Option | Type | Description |\n| ------ | ---- | ----------- |\n| client | <pre class=\"language-ts\"><code class=\"language-ts\">ApolloClient</code></pre> | ApolloClient instance use to make the call. |\n| mutation | <pre class=\"language-ts\"><code class=\"language-ts\">DocumentNode <span class=\"token operator\">&vert;</span> TypedDocumentNode</code></pre> | A specific mutation document. See [`mutation`](/api/interfaces/mutation#mutation). |\n| variables | <pre class=\"language-ts\"><code class=\"language-ts\">Variables<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">&gt;</span> </code></pre> | Operation variables. See [`variables`](/api/interfaces/mutation#variables). |\n| optimisticResponse | | See [optimisticResponse]/api/interfaces/mutation#optimisticresponse) in ApolloMutationInterface |\n| context | <pre class=\"language-ts\"><code class=\"language-ts\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span></code></pre> | Context object passed through the link execution chain. |\n| errorPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">ErrorPolicy</code></pre> | Error policy to use for the mutation. See [`errorPolicy`](/api/interfaces/mutation#errorpolicy) |\n| fetchPolicy | <pre class=\"language-ts\"><code class=\"language-ts\">FetchPolicy</code></pre> | See [`fetchPolicy`]/api/interfaces/mutation#fetchpolicy) |\n| refetchQueries | See [`refetchQueries`](/api/interfaces/mutation#refetchQueries) | |\n| awaitRefetchQueries | <pre class=\"language-ts\"><code class=\"language-ts\">boolean</code></pre> | See [awaitRefetchQueries](#awaitrefetchqueries) |\n| updater | See [`updater`](/api/interfaces/mutation#updater) | Function used to update the client cache following the mutation. |\n"
            }
          ],
          "return": {
            "summary": "Hybrids descriptor which mixes the [ApolloMutationInterface](/api/interfaces/mutation/) in on connect",
            "type": {
              "type": "Descriptor<ApolloMutationElement<D, V>>"
            }
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "./factories/subscription.js",
      "exports": [
        {
          "name": "subscription",
          "kind": "js",
          "declaration": {
            "name": "subscription"
          }
        }
      ],
      "declarations": [
        {
          "kind": "function",
          "name": "subscription",
          "description": "Hybrids property descriptor factory for GraphQL Subscriptions.\nImplements the [ApolloSubscriptionElement](/api/interfaces/subscription/) interface.",
          "parameters": [
            {
              "name": "document",
              "optional": true,
              "summary": "The subscription document.",
              "type": {
                "type": "DocumentNode | TypedDocumentNode"
              }
            },
            {
              "name": "options",
              "optional": true,
              "summary": "Options to configure the subscription.",
              "type": {
                "type": "SubscriptionHybridsFactoryOptions<D, V>"
              }
            }
          ],
          "return": {
            "summary": "Hybrids descriptor which mixes the [ApolloSubscriptionInterface](/api/interfaces/subscription/) in on connect",
            "type": {
              "type": "Descriptor<ApolloSubscriptionElement<D, V>>"
            }
          }
        }
      ]
    }
  ]
}