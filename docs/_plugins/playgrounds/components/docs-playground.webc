<script webc:setup>
  const enc = s => s?.replace(/[\u00A0-\u9999<>\&]/g, i => `&#${i.charCodeAt(0)}`);
  const isIndex = x => x === 'index.html';
  const getContent = file => file?.content;
  const getLang = filePath => filePath.split('.').pop();
  const htmlencode = str => str.replace('</'+'script>', '&lt;/script>');

  function hidestuff(filename, content) {
    return !isIndex(filename) ? content : `<!-- playground-hide -->
<!doctype html>
<head>
  <style>
    body {
      font-family: 'Open sans', sans-serif;
    }
    @media (prefers-color-scheme: dark) {
      body {
        color: white;
      }
    }
  </style>
</head>
<body>
<!-- playground-hide-end -->
${content}
<!-- playground-hide -->
</body>
<!-- playground-hide-end -->
`;
  }

  function getSamples(playgroundName, selectedFile = 'index.html') {
    const files = getPlaygroundFiles(playgroundName);
    const samples = files.map(function filePathToSampleConfig(filename) {
      const content = readPlaygroundFile(filename, playgroundName);
      const selected = filename === selectedFile;
      return {
        content: hidestuff(filename, content),
        mimetype: `sample/${getLang(filename)}`,
        selected,
        filename,
      };
    });
    return samples.sort((a, b) => a.selected ? -1 : 0);
  }

  function generateSnippet(playgroundName, selectedFile = 'index.html') {
    try {
      const samples = getSamples(playgroundName);
      const snippet = samples.find(x => x.filename === selectedFile);
      if (snippet) {
        const content = getContent(snippet);
        let redacted = content;
        const redactRe = /<!-- playground-hide -->(.*?)<!-- playground-hide-end -->/s;
        while (redactRe.test(redacted))
          redacted = redacted.replace(redactRe, '');
        const lang = getLang(snippet.filename)
        return this.highlight(lang, redacted.trim()).trim();
      } else {
        console.log(`No snippet for ${playgroundName}`);
        return '';
      }
    } catch(e) {
      console.error(e)
      throw e
    }
  }

  function escapeScriptEndTags(content) {
    return content.replaceAll('</'+'script>', '&lt;/script>');
  }

</script>
<noscript>
  <style>
    docs-playground:not(:defined) {
      opacity: 1 !important;
    }

    docs-playground > pre {
      margin-bottom: 0;
    }
  </style>
</noscript>
<style>

  :root {
    /* playground */
    --playground-code-attribute-color: var(--markdown-syntax-attr-name-color);
    --playground-code-atom-color: var(--markdown-syntax-keyword-color);
    --playground-code-default-color: var(--markdown-syntax-color);
    --playground-code-punctuation-color: var(--markdown-syntax-punctuation-color);
    --playground-code-property-color: var(--markdown-syntax-class-name-color);
    --playground-code-string-color: var(--markdown-syntax-string-color);
    --playground-code-function-color: var(--markdown-syntax-function-color);
    --playground-code-operator-color: var(--markdown-syntax-operator-color);
    --playground-code-comment-color: var(--markdown-syntax-comment-color);
    --playground-code-number-color: var(--markdown-syntax-number-color);
    --playground-code-boolean-color: var(--markdown-syntax-boolean-color);
    --playground-code-tag-color: var(--markdown-syntax-tag-color);
    --playground-code-variable-color: var(--markdown-syntax-variable-color);
    --playground-code-def-color: var(--markdown-syntax-variable-color);
    --playground-code-background-color: var(--markdown-syntax-background-color);
    --playground-code-callee-color: var(--markdown-syntax-function-color);
    --playground-code-keyword-color: var(--markdown-syntax-keyword-color);
    --playground-code-variable-2-color: var(--markdown-syntax-attr-name-color);
    --playground-code-selection-background: var(--markdown-table-row-odd-background-color, #f6f8fa);
    --playground-code-cursor-color: var(--markdown-syntax-color);
    --playground-code-background: var(--markdown-syntax-background-color);
    --playground-tab-bar-background: var(--page-background);
    --playground-tab-bar-foreground-color: var(--primary-text-color);
    --playground-preview-toolbar-background: var(--page-background);
    --playground-preview-toolbar-foreground-color: var(--primary-text-color);
    --playground-highlight-color: var(--primary-color);
    --playground-code-builtin-color: var(--markdown-blockquote-color);
    --playground-snippet-button-background: var(--code-button-background);
    --playground-snippet-button-focus-background: var(--code-button-focus-background);
    --playground-snippet-button-focus-color: var(--code-button-focus-color);
    --playground-snippet-outer-background-color: var(--page-background);
    --playground-snippet-focus-border-color: var(--primary-color);
  }

</style>
<template shadowroot="open" shadowrootmode="open">
  <style>

    :host {
      display: block;
      box-sizing: border-box;
      position: relative;
      width: 100%;
      height: auto;
    }

    playground-ide {
      display: none;
      border: 0;
      overflow: hidden;

      --playground-code-font-family: monospace;
      --playground-code-font-size: 14px;
      --playground-border: none;
    }

    #snippet,
    playground-ide {
      width: 100%;
      height: 100%;
      border-radius: var(--playground-snippet-border-radius, 6px);
    }

    #snippet {
      display: block;
      overflow: hidden;
    }

    #snippet,
    button {
      border: 1px solid var(--playground-snippet-border-color, transparent);
      transition: border-color 0.2s ease-in-out;
      will-change: border-color;
    }

    :host([show]) playground-ide {
      display: flex;
      width: var(--playground-ide-width, 100%);
      height: var(--playground-ide-height, 600px);
    }

    button {
      background: var(--playground-snippet-button-background);
      border-end-end-radius: 6px;
      border-start-start-radius: 6px;
      color: inherit;
      cursor: pointer;
      display: block;
      font-size: 16px;
      outline: none;
      padding: 9px 16px;
      position: absolute;
      bottom: 0;
      right: -2px;
      transition:
        border-color 0.2s ease-in-out,
        background 0.1s ease,
        color 0.1s ease;
    }

    button:focus,
    button:hover {
      color: var(--playground-snippet-button-focus-color, var(--code-button-focus-color));
      background: var(--playground-snippet-button-focus-background, var(--code-button-focus-background));
      border-bottom-color: var(--playground-snippet-button-focus-background, var(--code-button-focus-background)) !important;
      border-right-color: var(--playground-snippet-button-focus-background, var(--code-button-focus-background)) !important;
    }

    :host([show]) #snippet,
    :host([show]) button {
      display: none;
    }

    :host(:not([show]):focus-within) #snippet,
    :host(:not([show]):hover) #snippet {
      border-color: var(--playground-snippet-focus-border-color, black);
    }

    :host(:not([show]):focus-within) button,
    :host(:not([show]):hover) button {
      border-top-color: var(--playground-snippet-focus-border-color, black);
      border-left-color: var(--playground-snippet-focus-border-color, black);
      border-bottom-color: var(--playground-snippet-outer-background-color, var(--page-background));
      border-right-color: var(--playground-snippet-outer-background-color, var(--page-background));
    }

    ::slotted(pre) {
      margin: 0 !important;
    }

    :host([loading]) #edit,
    #loading {
      display: none;
    }

    :host([loading]) #loading {
      display: inline-block;
    }

  </style>
  <!-- because of webc 0.11.1 poor support for DSD, we'll add this in with a transform imperatively add this. -->
  <!--- <slot id="snippet" webc:keep></slot> --->
  <webc-dsd-slot-workaround id="snippet"></webc-dsd-slot-workaround>
  <playground-ide>
    <script webc:for="file of getSamples(playgroundName, selectedFile)"
            webc:keep
            :filename="file.filename"
            :type="file.mimetype"
            :selected="file.selected"
            @raw="escapeScriptEndTags(file.content)"></script>
    <script type="sample/css">
      html,
      body {
        background: black;
        font-family: 'Open sans';
        color: white;
      }
    </script>
  </playground-ide>
  <button part="button">
    <span id="edit">▶️ Edit Live</span>

    <slot name="loader" webc:keep>
      <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->
      <svg id="loading" width="90" height="20" viewBox="0 0 120 30" xmlns="http://www.w3.org/2000/svg" fill="var(--primary-text-color)">
        <circle cx="15" cy="15" r="15">
          <animate attributeName="r" from="15" to="15" begin="0s" dur="0.8s" values="15;9;15" calcMode="linear" repeatCount="indefinite"></animate>
          <animate attributeName="fill-opacity" from="1" to="1" begin="0s" dur="0.8s" values="1;.5;1" calcMode="linear" repeatCount="indefinite"></animate>
        </circle>
        <circle cx="60" cy="15" r="9" fill-opacity="0.3">
          <animate attributeName="r" from="9" to="9" begin="0s" dur="0.8s" values="9;15;9" calcMode="linear" repeatCount="indefinite"></animate>
          <animate attributeName="fill-opacity" from="0.5" to="0.5" begin="0s" dur="0.8s" values=".5;1;.5" calcMode="linear" repeatCount="indefinite"></animate>
        </circle>
        <circle cx="105" cy="15" r="15">
          <animate attributeName="r" from="15" to="15" begin="0s" dur="0.8s" values="15;9;15" calcMode="linear" repeatCount="indefinite"></animate>
          <animate attributeName="fill-opacity" from="1" to="1" begin="0s" dur="0.8s" values="1;.5;1" calcMode="linear" repeatCount="indefinite"></animate>
        </circle>
      </svg>
    </slot>
  </button>
</template>
<script webc:type="js">generateSnippet(playgroundName)</script>
<script type="module" webc:keep>
  import { polyfillDeclarativeShadowDOM } from '/assets/dsd.js';
  class DocsPlayground extends HTMLElement {
    static is = 'docs-playground';

    static importSpecifier = 'https://unpkg.com/playground-elements?module';

    static observedAttributes = ['show', 'playground-url'];

    static async fetchScript(url) {
      return fetch(new URL(url, location.origin).toString()).then(x => x.text());
    }

    $(x) { return this.shadowRoot.querySelector(x); }

    get playgroundIde() { return this.$('playground-ide'); }
    get button() { return this.$('button'); }
    get file() { return this.getAttribute('file') ?? 'index.html'; }

    attributeChangedCallback(name, _, next) {
      switch (name) {
        case 'playground-url':
          if (this.playgroundUrl !== next)
            this.playgroundUrl = next;
      }
    }

    constructor() {
      super();
      polyfillDeclarativeShadowDOM(this);
    }

    connectedCallback() {
      this.button.addEventListener('click', () => this.show());
      window.requestIdleCallback?.(() => import(DocsPlayground.importSpecifier));
      if (location.hash === `#${this.id}`)
        this.show();
    }

    async show() {
      this.setAttribute('loading', '');
      this.button.disabled = true;
      await import(DocsPlayground.importSpecifier);
      await customElements.whenDefined('playground-ide');
      this.setAttribute('show', '');
      this.button.disabled = false;
    }

    load() {
      const { title = 'Snippet' } = this.dataset;
      this.playgroundIde.title = title;
    }
  }

  customElements.define(DocsPlayground.is, DocsPlayground);
</script>

