<script webc:setup>
const linkToTypes = (x => x);
function codeBlock(type, lang='ts') {
  return renderTemplate(`~~~${lang}\n${type}\n~~~`, 'njk,md');
}
</script>
<template shadowrootmode="open" webc:if="member">
  <style>
    :host {
      position: relative;
      max-width: 100%;
      display: grid;
      grid-template-areas: 'head' 'body';
      grid-template-rows: min-content 1fr;
      margin-block-end: 1rem;
    }
    .visually-hidden {
      position: absolute;
      clip: rect(1px, 1px, 1px, 1px);
    }
    header {
      display: flex;
      align-items: center;
      gap: 16px;
      flex-flow: row wrap;
      border-start-start-radius: 6px;
      border-start-end-radius: 6px;
      background: var(--type-doc-header-background, var(--markdown-table-row-odd-background-color, #f6f8fa));
      padding: 6px 10px;
      transition: background 0.2s ease-in-out;
    }
    #inheritance {
      margin-inline-start: auto;
    }
    #inheritance button {
      color: inherit;
      background: none;
      border: none;
      margin-inline-end: 3px;
    }
    #inheritance button[disabled] {
      display: none;
    }
    #inheritance button,
    #inheritance button svg {
      height: 24px;
      width: 24px;
      transform: rotate(0deg);
      transition: transform 0.2s ease-in-out;
    }
    :host([expanded]) #inheritance button svg {
      transform: rotate(180deg);
    }
    #body {
      background: var(--type-doc-background, var(--markdown-syntax-background-color));
      padding: 1rem 1.6rem;
      border-end-start-radius: 6px;
      border-end-end-radius: 6px;
    }
    #body p:last-child,
    #body ::slotted(p:last-child) {
      margin: 0 !important;
    }
    #body h3,
    #body ::slotted(h3) {
      margin-block-start: 4px !important;
    }
    #body .returns + p:last-child,
    #body ::slotted(.returns + p:last-child) {
      float: inline-end;
    }
    /* nested type-doc */
    #body type-doc,
    #body ::slotted(type-doc) {
      margin-block-end: 0;
      background: transparent;
      padding: 0.3rem 0.8rem;
    }
    #body,
    header,
    #body :not(type-doc),
    #body ::slotted(:not(type-doc)) {
      max-width: 100%;
    }
    :host([kind="return"]) header,
    :host([kind="parameter"]) header {
      background: none;
      padding-inline-start: 0;
    }
    :host([data-empty-body]) header {
      border-radius: 6px;
    }
    :host([data-empty-body]) #body {
      display: none;
    }
    :host([data-inherited-from]) header {
      justify-content: space-between;
      overflow-x: hidden;
    }
    :host([data-inherited-from]:not([expanded])) header {
      border-end-start-radius: 6px;
      border-end-end-radius: 6px;
      background: var(--type-doc-background, var(--markdown-syntax-background-color));
    }
    :host([data-inherited-from]:not([data-empty-body])) header ::slotted([slot="name"]) {
      cursor: pointer;
    }
    :host([data-inherited-from]) header #type,
    :host([data-inherited-from]) header ::slotted([slot="type"]) {
      display: none !important;
    }
    type-doc:not([data-inherited-from]) [slot="type"]::before {
      content: 'type: ';
    }
    :host([kind="return"]) #body,
    :host([kind="parameter"]) #body {
      padding: 0;
    }
    @media (max-width: 640px) {
      #body,
      header,
      #body :not(type-doc):not(h2):not(h3),
      #body ::slotted(:not(type-doc):not(h2):not(h3)) {
        overflow: auto;
      }
    }
    @media (min-width: 500px) {
      :host([data-inherited-from]) header #type,
      :host([data-inherited-from]) header ::slotted([slot="type"]) {
        display: inline !important;
      }
    }
  </style>
  <header>
    <link-heading id="name" level="3" :text="member?.name"></link-heading>
    <span class="visually-hidden"></span>
    <span webc:if="attribute" @text="attribute"></span>
    <template id="type" webc:nokeep @html="type"></template>
    <div id="inheritance">
      <span webc:if="member.inheritedFrom">
        <em>inherited from</em>
        <a webc:if="getModuleLink(member).length"
          :href="`${getModuleLink(member)}#${member.name.toLowerCase()}`"
          @text="member.inheritedFrom.name"></a>
        <span webc:else @text="member.inheritedFrom.name"></span>
      </span>
      <button id="toggle" aria-label="Toggle details" aria-controls="body">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M0 0h24v24H0z" fill="none"/>
          <path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z" fill="currentColor"/>
        </svg>
      </button>
    </div>
  </header>
  <article id="body">
    <template webc:nokeep
              webc:type="11ty"
              11ty:type="njk,md"
              @html="member.summary"></template>
    <template webc:nokeep
              webc:type="11ty"
              11ty:type="njk,md"
              @html="member.description"></template>
  </article>
</template>
<script webc:bucket="modules">
import { polyfillDeclarativeShadowDOM } from '/assets/dsd.js';
customElements.define('type-doc', class TypeDoc extends HTMLElement {
  #button;
  #inheritance;
  #body;

  get #emptyBody() { return this.hasAttribute('data-empty-body'); }
  get #isInherited() { return this.hasAttribute('data-inherited-from'); }
  get #expanded() { return this.#button.getAttribute('aria-expanded') === 'true'; }

  constructor() {
    super();
    if (!this.shadowRoot)
      polyfillDeclarativeShadowDOM(this);
    this.#button = this.shadowRoot.getElementById('toggle');
    this.#body = this.shadowRoot.getElementById('body');
    this.#inheritance = this.shadowRoot.getElementById('inheritance');
    this.#button.addEventListener('click', this.toggle);
  }

  connectedCallback() {
    this.#inheritance.hidden = this.#isInherited;
    this.#button.disabled = this.#emptyBody;
    this.#cloneHeading();
  }

  toggle() {
    this.#button.setAttribute('aria-expanded', !this.#emptyBody && !this.#expanded);
    this.#body.hidden = isInherited && !this.#expanded;
  }

  #cloneHeading() {
    const hidden = this.shadowRoot.querySelector('.visually-hidden');
    for (const child of hidden.children) child.remove();
    const heading = this.querySelector('[slot="name"]');
    if (!heading) return;
    hidden.append(heading.cloneNode(true));
  }
});
</script>
